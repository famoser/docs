{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Docs This is a collection of things I find/found notable. I might summarize books or structure my own experiences; mostly I do both at the same time. I may note down things I do not agree with, and leave out obvious part I already apply. Please do not conclude about how I work or think from the content contained in here.","title":"Welcome to Docs"},{"location":"#welcome-to-docs","text":"This is a collection of things I find/found notable. I might summarize books or structure my own experiences; mostly I do both at the same time. I may note down things I do not agree with, and leave out obvious part I already apply. Please do not conclude about how I work or think from the content contained in here.","title":"Welcome to Docs"},{"location":"communicate/argumentation/","text":"Argumentation https://yourlogicalfallacyis.com for fallacies in argumentation. separate polity (structures), politics (processes) und policy (content).","title":"Argumentation"},{"location":"communicate/argumentation/#argumentation","text":"https://yourlogicalfallacyis.com for fallacies in argumentation. separate polity (structures), politics (processes) und policy (content).","title":"Argumentation"},{"location":"communicate/negotiation/","text":"Negotiation principled negotiation: separate the people from the problem (work towards mutual agreement, actively listen and interpret in their favours focus on interests not positions (stand in their shoes to find out why / why not) invent options for mutual gain (do not finish negotiation until both parties have been heard insist on using objective criteria (find out intentions and never give in to pressure) work on your BATNA (but do not let it hinder you to find the best possible outcome)","title":"Negotiation"},{"location":"communicate/negotiation/#negotiation","text":"principled negotiation: separate the people from the problem (work towards mutual agreement, actively listen and interpret in their favours focus on interests not positions (stand in their shoes to find out why / why not) invent options for mutual gain (do not finish negotiation until both parties have been heard insist on using objective criteria (find out intentions and never give in to pressure) work on your BATNA (but do not let it hinder you to find the best possible outcome)","title":"Negotiation"},{"location":"communicate/non-violent%20communication/","text":"constructive feedback When _(observation) I feel (emotion) because I\u2019m needing some _(universal needs). Would you be able to (request)? You arrived 10 minutes late to the last three team meetings. I am frustrated because, as a team, we need efficiency. Please, could you be on time the next occurrences? I have received an answer to your email only after three days. I am frustrated because I need to work efficienctly. Please, could you respond within 24 hours? if answer negative/impusive, find out their universal needs. like \"do you feel hurt because your hard work is not recognised\" like \"is there more you would like to say?\" if answer inacceptable, establish boundaries. focus on meeting your universal need (not punitive). empatise not only with the others, but also yourself. observation observations versus evaluations \"You are unprepared\" -> \"I see no notes\" \"You did nothing\" -> \"Trello is same as last week\" emotion emotions versus thoughts communicate the evaluation, not the impact find root cause emotion (anger -> hurt) find personal (not externally caused) emotion (judged -> hurt) \"I feel judged\" -> \"I feel annoyed\" \"I feel rejected\" -> \"I feel hurt\" universal needs universal needs versus strategies underlying interest / need (decoupled of environment / people) \"I need your support\" -> \"I need support\" (avoid blame) \"Please include me in CCs\" -> \"I need transparency\" (communicate interest) universal needs (non-exhaustive): - Autonomy - Collaboration - Consistency, Clarity, Integrity, Transparency - Recognition, Respect - Reassurance, Security, Support, Understanding request requests versus demands request others to fulfil your need versus demands which may go against their own interests specific, postive-formulated, open to alternatives","title":"constructive feedback"},{"location":"communicate/non-violent%20communication/#constructive-feedback","text":"When _(observation) I feel (emotion) because I\u2019m needing some _(universal needs). Would you be able to (request)? You arrived 10 minutes late to the last three team meetings. I am frustrated because, as a team, we need efficiency. Please, could you be on time the next occurrences? I have received an answer to your email only after three days. I am frustrated because I need to work efficienctly. Please, could you respond within 24 hours? if answer negative/impusive, find out their universal needs. like \"do you feel hurt because your hard work is not recognised\" like \"is there more you would like to say?\" if answer inacceptable, establish boundaries. focus on meeting your universal need (not punitive). empatise not only with the others, but also yourself.","title":"constructive feedback"},{"location":"communicate/non-violent%20communication/#observation","text":"observations versus evaluations \"You are unprepared\" -> \"I see no notes\" \"You did nothing\" -> \"Trello is same as last week\"","title":"observation"},{"location":"communicate/non-violent%20communication/#emotion","text":"emotions versus thoughts communicate the evaluation, not the impact find root cause emotion (anger -> hurt) find personal (not externally caused) emotion (judged -> hurt) \"I feel judged\" -> \"I feel annoyed\" \"I feel rejected\" -> \"I feel hurt\"","title":"emotion"},{"location":"communicate/non-violent%20communication/#universal-needs","text":"universal needs versus strategies underlying interest / need (decoupled of environment / people) \"I need your support\" -> \"I need support\" (avoid blame) \"Please include me in CCs\" -> \"I need transparency\" (communicate interest) universal needs (non-exhaustive): - Autonomy - Collaboration - Consistency, Clarity, Integrity, Transparency - Recognition, Respect - Reassurance, Security, Support, Understanding","title":"universal needs"},{"location":"communicate/non-violent%20communication/#request","text":"requests versus demands request others to fulfil your need versus demands which may go against their own interests specific, postive-formulated, open to alternatives","title":"request"},{"location":"communicate/professional%20communication/","text":"Communicate Use most direct form of communication available. Especially if many questions open, try to arrange a call instead. E-Mails same as clean code applies: a single, minimal purpose. structure cleanly without repetitions. content: introduce by responding to previous email /events or introduce self (if first email). write short answer (actionable advice / help) which potentially resolves conversation. future steps / easy call to action mirror: choose the same form of anrede/gruss like your conversation partner. adapt the tone / formality to your conversation partner. respond at similar times / at least working times. respond within 24 hours or ensure the conversation partner receives a notice when a response can be expected. get back to people if no response received in 72h. Presentations adapt length & depth to the audience. ensure the moment is right (if in doubt, ask). make it look stunning. send drafts to target audience to involve them in specification. most from https://productivityhub.org/2019/04/19/how-to-deliver-constructive-feedback-in-difficult-situations/","title":"Communicate"},{"location":"communicate/professional%20communication/#communicate","text":"Use most direct form of communication available. Especially if many questions open, try to arrange a call instead.","title":"Communicate"},{"location":"communicate/professional%20communication/#e-mails","text":"same as clean code applies: a single, minimal purpose. structure cleanly without repetitions. content: introduce by responding to previous email /events or introduce self (if first email). write short answer (actionable advice / help) which potentially resolves conversation. future steps / easy call to action mirror: choose the same form of anrede/gruss like your conversation partner. adapt the tone / formality to your conversation partner. respond at similar times / at least working times. respond within 24 hours or ensure the conversation partner receives a notice when a response can be expected. get back to people if no response received in 72h.","title":"E-Mails"},{"location":"communicate/professional%20communication/#presentations","text":"adapt length & depth to the audience. ensure the moment is right (if in doubt, ask). make it look stunning. send drafts to target audience to involve them in specification. most from https://productivityhub.org/2019/04/19/how-to-deliver-constructive-feedback-in-difficult-situations/","title":"Presentations"},{"location":"communicate/rhetorics/","text":"Rhetorics Agreements have failed, due to misaligned / hidden interests, intellectual dishonestly or other bad luck scenarios. The point is no longer to agree, but to gather public support of own position. Climate is usually bad (both sides do not understand other point of view) or even malicious (hidden interests misalign with organisation's interests). Black rhetorics interrupt (ask for clarifications, to repeat closed/open questions, \"could you repeat ...\"). embarrass (ask difficult questions, quickly answer it with facts to leave the impression the asked one does not know those, \"you do not even know the basics\"). play naive (project the image of trying to understand but pretend that it is impossible to do so, \"I am still struggling with...\"). object continuously (always object, \"I just want to look at the problem from a different point of view\"). indirect insult (use formulations to accuse, \"you misunderstand me\"). direct insults (based on profession/education/lifestyle, wrap it up in a joke). deny competence (too young/old, no real-world experience; \"its not personal\"). deny integrity (pick out inconsistent behaviour, \"you have arrived by airplane\"). focus on irrelevant details (to avoid talk about the point in question). appeal to morals (use rhetorical questions, \"you dishonour the legacy ...\"). mimic to focus on the big picture (\"lets focus on the main points, I can deliver the detailed numbers ...\"). mimic diligence (disregard arguments that are imprecise, \"this just seems not properly thought through\"). phrases (\"it is obvious\", \"everyone with good common sense\"). conjunctive (to get the opponent to say something stupid, \"what would you do if ...\"). counter questions (directly ask another question to get control of the conversation, \"i can answer this question but what will you do with the response?\").","title":"Rhetorics"},{"location":"communicate/rhetorics/#rhetorics","text":"Agreements have failed, due to misaligned / hidden interests, intellectual dishonestly or other bad luck scenarios. The point is no longer to agree, but to gather public support of own position. Climate is usually bad (both sides do not understand other point of view) or even malicious (hidden interests misalign with organisation's interests).","title":"Rhetorics"},{"location":"communicate/rhetorics/#black-rhetorics","text":"interrupt (ask for clarifications, to repeat closed/open questions, \"could you repeat ...\"). embarrass (ask difficult questions, quickly answer it with facts to leave the impression the asked one does not know those, \"you do not even know the basics\"). play naive (project the image of trying to understand but pretend that it is impossible to do so, \"I am still struggling with...\"). object continuously (always object, \"I just want to look at the problem from a different point of view\"). indirect insult (use formulations to accuse, \"you misunderstand me\"). direct insults (based on profession/education/lifestyle, wrap it up in a joke). deny competence (too young/old, no real-world experience; \"its not personal\"). deny integrity (pick out inconsistent behaviour, \"you have arrived by airplane\"). focus on irrelevant details (to avoid talk about the point in question). appeal to morals (use rhetorical questions, \"you dishonour the legacy ...\"). mimic to focus on the big picture (\"lets focus on the main points, I can deliver the detailed numbers ...\"). mimic diligence (disregard arguments that are imprecise, \"this just seems not properly thought through\"). phrases (\"it is obvious\", \"everyone with good common sense\"). conjunctive (to get the opponent to say something stupid, \"what would you do if ...\"). counter questions (directly ask another question to get control of the conversation, \"i can answer this question but what will you do with the response?\").","title":"Black rhetorics"},{"location":"communicate/teams/","text":"Teams how interaction works dynamics https://en.wikipedia.org/wiki/Group_dynamics ranks (Raoul Schinder) describes personas occurring in most groups assigns roles based on interaction within the group and the environment: Alpha as the leader and manages the environment. Beta as the expects supporting alpha to part of the power process. Gamma as a group member which identify with alpha without own power demands. Omega which defies the targets set by alpha due to a different view of the environment. get together http://www.liberatingstructures.com/ls-menu/ self-organizing CDE (Hackmann / Hundermark) describes basics to allow a self-organized team to flourish to allow self-organisation, there needs to be: Container (clear boundary between member or not member of team) Differences (clear differences between the members in education, experience, culture, ...) Exchange (communication within and without the container) the team is part of the environment, which should provide the team with: Information (sufficient information about the business/sales/analytics) Infrastructure (sufficient hard/software, rooms, ...) Education (allow the team to educate self) Reward (exposure & money) the manager is in charge to optimize the environment that the required properties can be achieved, and that team work is possible. Possible actions: Container: change members, rooms, seating Differences: change members, provocative questions, ensure all voices heard, change decision procedures Exchanges: train members to solve conflicts, create cosy environments, change meeting concept/frequency, change communication channels Trust Pyramid (Stuart Wells) defines and describes stages of teams and how they can succeed. Contractual as the lowest level of trust. Team members refer to job title, contractual arrangements and other rules of law. Communication is primary in the written form and escalated frequently. The team can function if everyone aligns to the contract. Conditional which allows verbal agreements. Team members use phrases like \"If you do that, I will to this*. Communication is primarily written but also verbal. The team functions if everyone cooperates fairly. Cooperative when trust is established. Team members are passionate about the project, discuss disagreements openly and distribute work load according to skill level and personal needs. The team functions if everyone receives a fair share of the reward. Un-Conditional when total trust is established. Team members know their and the others' value and place in the team and respect it. Members will cover for other to preserve the reputation of the team. The teams success comes first. Performance Pyramid describes attributes of functional / failing teams ordered by degree of escalation good teams show trust, conflict readiness, commitment, shared responsibility and finally goal-orientation. failing teams display lack of openness, lack of harmony (gossip), ambiguity, low standards and finally dominance of status/ego. Self-organized teams (Ross Ashby / Heylighten) describes how self-organization is characterized a real team has the following features; a compelling mission to fulfil clear boundaries (information flow, alignment to organization, resources, decision power) authority to self-manage (within given boundaries) stability over some period of time the following aspects have to be managed (either by the team or manager) directions (target/purpose of the team) designing the performing unit (environment, scheduling, work behaviour, ...) monitoring/managing work progress execution of the work self-organized teams are characterized by: distributed control continuous adaptation emergent structures positive/negative feedback resilience Cross cultural teams https://www.hofstede-insights.com/country-comparison/ to assess cultural differences","title":"Teams"},{"location":"communicate/teams/#teams","text":"how interaction works","title":"Teams"},{"location":"communicate/teams/#dynamics","text":"https://en.wikipedia.org/wiki/Group_dynamics","title":"dynamics"},{"location":"communicate/teams/#ranks-raoul-schinder","text":"describes personas occurring in most groups assigns roles based on interaction within the group and the environment: Alpha as the leader and manages the environment. Beta as the expects supporting alpha to part of the power process. Gamma as a group member which identify with alpha without own power demands. Omega which defies the targets set by alpha due to a different view of the environment.","title":"ranks (Raoul Schinder)"},{"location":"communicate/teams/#get-together","text":"http://www.liberatingstructures.com/ls-menu/","title":"get together"},{"location":"communicate/teams/#self-organizing-cde-hackmann-hundermark","text":"describes basics to allow a self-organized team to flourish to allow self-organisation, there needs to be: Container (clear boundary between member or not member of team) Differences (clear differences between the members in education, experience, culture, ...) Exchange (communication within and without the container) the team is part of the environment, which should provide the team with: Information (sufficient information about the business/sales/analytics) Infrastructure (sufficient hard/software, rooms, ...) Education (allow the team to educate self) Reward (exposure & money) the manager is in charge to optimize the environment that the required properties can be achieved, and that team work is possible. Possible actions: Container: change members, rooms, seating Differences: change members, provocative questions, ensure all voices heard, change decision procedures Exchanges: train members to solve conflicts, create cosy environments, change meeting concept/frequency, change communication channels","title":"self-organizing CDE (Hackmann / Hundermark)"},{"location":"communicate/teams/#trust-pyramid-stuart-wells","text":"defines and describes stages of teams and how they can succeed. Contractual as the lowest level of trust. Team members refer to job title, contractual arrangements and other rules of law. Communication is primary in the written form and escalated frequently. The team can function if everyone aligns to the contract. Conditional which allows verbal agreements. Team members use phrases like \"If you do that, I will to this*. Communication is primarily written but also verbal. The team functions if everyone cooperates fairly. Cooperative when trust is established. Team members are passionate about the project, discuss disagreements openly and distribute work load according to skill level and personal needs. The team functions if everyone receives a fair share of the reward. Un-Conditional when total trust is established. Team members know their and the others' value and place in the team and respect it. Members will cover for other to preserve the reputation of the team. The teams success comes first.","title":"Trust Pyramid (Stuart Wells)"},{"location":"communicate/teams/#performance-pyramid","text":"describes attributes of functional / failing teams ordered by degree of escalation good teams show trust, conflict readiness, commitment, shared responsibility and finally goal-orientation. failing teams display lack of openness, lack of harmony (gossip), ambiguity, low standards and finally dominance of status/ego.","title":"Performance Pyramid"},{"location":"communicate/teams/#self-organized-teams-ross-ashby-heylighten","text":"describes how self-organization is characterized a real team has the following features; a compelling mission to fulfil clear boundaries (information flow, alignment to organization, resources, decision power) authority to self-manage (within given boundaries) stability over some period of time the following aspects have to be managed (either by the team or manager) directions (target/purpose of the team) designing the performing unit (environment, scheduling, work behaviour, ...) monitoring/managing work progress execution of the work self-organized teams are characterized by: distributed control continuous adaptation emergent structures positive/negative feedback resilience","title":"Self-organized teams (Ross Ashby / Heylighten)"},{"location":"communicate/teams/#cross-cultural-teams","text":"https://www.hofstede-insights.com/country-comparison/ to assess cultural differences","title":"Cross cultural teams"},{"location":"communicate/books/crucial%20conversations/","text":"crucial conversations start with heart interests based discussion keep reflecting if own behaviour still represents interests avoid fools choice winning vs loosing, peace vs honesty combine wants and not-wants to get true interest to pursue learn to look content & conditions and discussion matters lost safety motivates defensive mechanisms watch behaviour / body language for perceived lost safety silence masking (hiding true opinion) avoiding (only superficial talks) withdrawing (exit talks) violence controlling (coercing others) like overstating facts, speaking in absolutes, directive questions, ... labelling (dismiss using stereotype ideas/persons) attacking (belittling & threatening) make it safe ensure mutual purpose (entrance condition) believable honest motives & interest in others' goals, values and mutual respect (continuance condition) believable respect based on similarities & mutual interests as soon as one of the two lost must recover before continuing with conversation apologize when respect was violated sincere / without face-saving apology recognise causing / not preventing harm contrast when misunderstandings not an apology, but an explanation of intentions address concerns that purpose was malicious \"i dont want to disrespect / bad purpose\" declare what the target was/is \"i do want to show appreciation; I will do this later\" create mutual purpose when no misunderstandings but different interests collide (c)ommit to stay in discussion until solution is found (r)ecognise purpose (what the real interest is) (i)nvent mutual purpose (focus on stronger / higher goals) (b)rainstorm new strategies (invent options for mutual benefit)","title":"crucial conversations"},{"location":"communicate/books/crucial%20conversations/#crucial-conversations","text":"","title":"crucial conversations"},{"location":"communicate/books/crucial%20conversations/#start-with-heart","text":"interests based discussion keep reflecting if own behaviour still represents interests avoid fools choice winning vs loosing, peace vs honesty combine wants and not-wants to get true interest to pursue","title":"start with heart"},{"location":"communicate/books/crucial%20conversations/#learn-to-look","text":"content & conditions and discussion matters lost safety motivates defensive mechanisms watch behaviour / body language for perceived lost safety silence masking (hiding true opinion) avoiding (only superficial talks) withdrawing (exit talks) violence controlling (coercing others) like overstating facts, speaking in absolutes, directive questions, ... labelling (dismiss using stereotype ideas/persons) attacking (belittling & threatening)","title":"learn to look"},{"location":"communicate/books/crucial%20conversations/#make-it-safe","text":"ensure mutual purpose (entrance condition) believable honest motives & interest in others' goals, values and mutual respect (continuance condition) believable respect based on similarities & mutual interests as soon as one of the two lost must recover before continuing with conversation apologize when respect was violated sincere / without face-saving apology recognise causing / not preventing harm contrast when misunderstandings not an apology, but an explanation of intentions address concerns that purpose was malicious \"i dont want to disrespect / bad purpose\" declare what the target was/is \"i do want to show appreciation; I will do this later\" create mutual purpose when no misunderstandings but different interests collide (c)ommit to stay in discussion until solution is found (r)ecognise purpose (what the real interest is) (i)nvent mutual purpose (focus on stronger / higher goals) (b)rainstorm new strategies (invent options for mutual benefit)","title":"make it safe"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/","text":"die kunst recht zu behalten dialektik wenn eigene meinung verteidigt werden soll aus prinzip (eitelkeit), wegen logischer fallstricken logische fallstricke logikfehler in argumentationen aufzudecken ist schwierig zB wiederlegung beweis =!> pr\u00e4misse falsch sowohl bei wahren als auch bei unwahren thesen darum \"rational\" auf eigener meinung zu beharren logik wahre these m\u00f6gl. falsche schlussfolgerungen und/oder pr\u00e4missen keine gegenbeispiele falsche these falsche schlussfolgerungen und/oder pr\u00e4missen m\u00f6gl. gegenbeispiele fallacies wiederlegung pr\u00e4misse wiederlegt nicht die theorie argumentationsebenen these steht, die wiederlegt werden soll wiederlegungen ad rem (blick auf these) ad hominem (blick auf aussagen gegner) ad personam (blick auf pers\u00f6nliches gegner) direkte wiederlegung voraussetzungen nicht gegeben nego majorem/minorem (wiederlegung der pr\u00e4missen) nego consequntiam (wiederlegung das these aus pr\u00e4missen folgt) indirekte wiederlegung resultat ist falsch apagoge (kombination mit anderen wahrheiten zum wiederspruch) instanz (gegenbeispiel) publikum publikum ist das ziel der \u00fcberzeugung wahrheitsfinding / einsicht gegners irrelevant (f\u00fcr dialektik) entstehung \u00f6ffentlicher meinung zwei / drei leute haben starke meinung \u00fcberzeugen umfeld, nach und nach spricht sich herum weil so viele daran glauben werden gr\u00fcnde \u00fcberbewertet unter annahme andere haben annahmen/schlussfolgerung \u00fcberpr\u00fcft gegner sind nun querulanten, die verstummt werden grunds\u00e4tzliches vorgehen pr\u00e4missen etablieren (vermeindlich oder richtig) schlussfolgerung ziehen (ob aus pr\u00e4missen folgt oder nicht) these als gezeigt deklarieren (ob wahr oder nicht) these wiederlegen pr\u00e4missen wiederlegen oder nicht zugeben schlussfolgerung bestreiten (fehlende pr\u00e4missen behaupten) these ablenken (themawechseln) pr\u00e4misse etablieren (attack) etablierung von pr\u00e4missen die f\u00fcr schlussfolgerung gebraucht werden unter-pr\u00e4missen etablieren eine abstraktionseben tiefer pr\u00e4missen etablieren aus denen dann die eigentlichen pr\u00e4missen folgen pr\u00e4missen verbergen ben\u00f6tigte pr\u00e4missen erst direkt vor schlussfolgerung zeigen damit gegner antworten nicht steuern kann verwirrspiel satz negativ / kompliziert formulieren gleichzeitig negativ & positiv stellen ungewohnte ordnung, formulierung, begrifflichkeiten je nach antworten (ja/nein) pr\u00e4missen anders aufstellen bestimmte antwort nudgen auswahl lassen bei der bestimmte option besser erscheint ungew\u00fcnschte optionen ad absurdum ziehen (extremisierung, naming) zB \"nie l\u00fcgen oder oft?\"; schwarz-weiss malen zB \"vitamin B vs vetternwirtschaft\"; unliebsame namen verwenden ad hominem pr\u00e4missen pr\u00e4missen ex concensis etablieren (gegner zugest\u00e4ndnissen) aus der denkweise des gegners schlussfolgern autorit\u00e4ten appellation experten (bestenfalls vom gegner respektierte) einfacher wenn \"nicht vom fach\" (da expertenkonflikte unbekannt) aussagen aus dem kontext reissen \"allgemeine meinung\" brauchen (\"es weiss doch jeder\") pr\u00e4misse wiederlegen (defense) bei wiederlegung ins allgemeine ziehen zB vorgaukeln damit sei theorie auch wiederlegt ins absurde ziehen im weitesten sinne aufnehmen / verstehen im engsten sinne kommunizieren gegenmittel ist exakte grenze aufzeigen \"so viel habe ich gesagt und nicht mehr\" frage kontern frage ins allgemeine ziehen und dort beantworten zB mathematische these => tr\u00fcglichkeit menschliches wissens als gleich mit streitfrage ansehen (somit fehlt etablierung) argumente kontern ad hominem falls m\u00f6glich (weil einfacher) gegenbeispiel f\u00fcr \"alle ...\" finden technische begr\u00fcndung (nicht nachvollziehbar f\u00fcr publikum) argument umdrehen argument versuchen in andere richtung zu brauchen \"kind darf bl\u00f6des machen\" => \"bestrafen verhindert gewohnheit\" argument \"nicht verstehen\" aus h\u00f6hrer stellung behaupten argument ist unverst\u00e4ndlich gegenmittel \"entschuldigt meine ungl\u00fcckliche darstellung\" dann erneut in sehr einfachen worten erkl\u00e4ren argument schubladisieren mit verhasster kategorie in verbindung bringen die nach allgemeiner auffassung vollst\u00e4ndig wiederlegt ist zB \"naziideologie\", \"kommunismus\", ... schlussfolgerung (attack) schluss schnell ziehen um m\u00e4ngel in argumentation verdecken direkt als zugestanden behandeln (statt best\u00e4tigen lassen) pr\u00e4missen verallgemeinern etablierte einzelf\u00e4lle allgemein g\u00fcltig auffassen zB unsicherheit medizin => unsicherheit alles wissens pr\u00e4missen uminterpretieren (homonomie) ohne pr\u00e4missen ziehen auch ohne etablierte pr\u00e4missen schlussfolgerung ziehen schnell argumentieren & selbstbewusst behaupten publikum m\u00f6gl. kein \u00fcberblick / zu langsame reaktionszeit schlussfolgerung (defense) pr\u00e4missen f\u00fcr schlussfolgerung nicht anerkennen schlechte pr\u00e4missen entkr\u00e4ftigen fallunterscheidung einf\u00fchren (doppelbedeutung, heterogenit\u00e4t) wiederlegen um damit (scheinbar) theorie zu wiederlegen streitfrage verschieben in anderes thema \u00fcbergehen anderes aspekt der thematik ansprechen ad hominem / ad personam argumente anfangen theorie != praxis argumentieren \"mag in der theorie stimmen aber nicht in der praxis\" entgegnen dass dann auch theorie falsch sein m\u00fcsste ad hominem (angriff) aussagen des gegners uminterpretieren und gegen ihn nutzen homonomie (mehrdeutiges wort uminterpretieren) bei wort mit mehreren bedeutungen eine andere verstehen andere bedeutung als pr\u00e4misse / ad hominem nutzen gegenmittel ist synonym verwenden / klarifizieren relative behauptung allgemein interpretieren aussage aus spezifischem kontext allgemein auffassen zB \"masken sind gut\" im kontext vom arbeitsplatz entgegnen mit \"masken draussen sinnlos\" gegenmittel ist kontext klarifizieren ad personam (angriff) zornig machen durch unrecht, unversch\u00e4mtheit, schikane weil gegner ausserstande im zorn richtig zu urteilen (vermeindliche) wiederspr\u00fcche aufdecken wiedersprechende argumente aufzeigen inkonsistentes handeln anprangern starke reaktion auf argument/frage provozieren ausweichman\u00f6ver / zornig werden weist auf schwachen punkt hin nachhacken um argumentationsl\u00fccke zu finden / zornig zu machen argumente kontern wiederspruch mit pers\u00f6nlichem stand / handlung gegners aufzeigen wiederspruch mit interessen gegners aufzeigen gruppen bilden gruppenzugeh\u00f6rigkeit (oder eben auch nicht) ausnutzen wenn mehrheit des publikums in anderer gruppe ist technisch werden technische wortschwall den gegner nicht versteht als beweis vorgaukeln verunsichterter gegner m\u00f6gl. kein gegenargument zur hand ad personam (verteidigung) pers\u00f6nliche vorw\u00fcrfe kontern entkr\u00e4ften, nicht stehen lassen (da eingest\u00e4ndnis) zB \"das tut nicht zur sache\", \"das ist nicht wahr\" gegenattacke nicht sinnvoll (da erneute retaliation)","title":"die kunst recht zu behalten"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#die-kunst-recht-zu-behalten","text":"","title":"die kunst recht zu behalten"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#dialektik","text":"wenn eigene meinung verteidigt werden soll aus prinzip (eitelkeit), wegen logischer fallstricken logische fallstricke logikfehler in argumentationen aufzudecken ist schwierig zB wiederlegung beweis =!> pr\u00e4misse falsch sowohl bei wahren als auch bei unwahren thesen darum \"rational\" auf eigener meinung zu beharren","title":"dialektik"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#logik","text":"wahre these m\u00f6gl. falsche schlussfolgerungen und/oder pr\u00e4missen keine gegenbeispiele falsche these falsche schlussfolgerungen und/oder pr\u00e4missen m\u00f6gl. gegenbeispiele fallacies wiederlegung pr\u00e4misse wiederlegt nicht die theorie","title":"logik"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#argumentationsebenen","text":"these steht, die wiederlegt werden soll wiederlegungen ad rem (blick auf these) ad hominem (blick auf aussagen gegner) ad personam (blick auf pers\u00f6nliches gegner) direkte wiederlegung voraussetzungen nicht gegeben nego majorem/minorem (wiederlegung der pr\u00e4missen) nego consequntiam (wiederlegung das these aus pr\u00e4missen folgt) indirekte wiederlegung resultat ist falsch apagoge (kombination mit anderen wahrheiten zum wiederspruch) instanz (gegenbeispiel)","title":"argumentationsebenen"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#publikum","text":"publikum ist das ziel der \u00fcberzeugung wahrheitsfinding / einsicht gegners irrelevant (f\u00fcr dialektik) entstehung \u00f6ffentlicher meinung zwei / drei leute haben starke meinung \u00fcberzeugen umfeld, nach und nach spricht sich herum weil so viele daran glauben werden gr\u00fcnde \u00fcberbewertet unter annahme andere haben annahmen/schlussfolgerung \u00fcberpr\u00fcft gegner sind nun querulanten, die verstummt werden grunds\u00e4tzliches vorgehen pr\u00e4missen etablieren (vermeindlich oder richtig) schlussfolgerung ziehen (ob aus pr\u00e4missen folgt oder nicht) these als gezeigt deklarieren (ob wahr oder nicht) these wiederlegen pr\u00e4missen wiederlegen oder nicht zugeben schlussfolgerung bestreiten (fehlende pr\u00e4missen behaupten) these ablenken (themawechseln)","title":"publikum"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#pramisse-etablieren-attack","text":"etablierung von pr\u00e4missen die f\u00fcr schlussfolgerung gebraucht werden unter-pr\u00e4missen etablieren eine abstraktionseben tiefer pr\u00e4missen etablieren aus denen dann die eigentlichen pr\u00e4missen folgen pr\u00e4missen verbergen ben\u00f6tigte pr\u00e4missen erst direkt vor schlussfolgerung zeigen damit gegner antworten nicht steuern kann verwirrspiel satz negativ / kompliziert formulieren gleichzeitig negativ & positiv stellen ungewohnte ordnung, formulierung, begrifflichkeiten je nach antworten (ja/nein) pr\u00e4missen anders aufstellen bestimmte antwort nudgen auswahl lassen bei der bestimmte option besser erscheint ungew\u00fcnschte optionen ad absurdum ziehen (extremisierung, naming) zB \"nie l\u00fcgen oder oft?\"; schwarz-weiss malen zB \"vitamin B vs vetternwirtschaft\"; unliebsame namen verwenden ad hominem pr\u00e4missen pr\u00e4missen ex concensis etablieren (gegner zugest\u00e4ndnissen) aus der denkweise des gegners schlussfolgern autorit\u00e4ten appellation experten (bestenfalls vom gegner respektierte) einfacher wenn \"nicht vom fach\" (da expertenkonflikte unbekannt) aussagen aus dem kontext reissen \"allgemeine meinung\" brauchen (\"es weiss doch jeder\")","title":"pr\u00e4misse etablieren (attack)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#pramisse-wiederlegen-defense","text":"bei wiederlegung ins allgemeine ziehen zB vorgaukeln damit sei theorie auch wiederlegt ins absurde ziehen im weitesten sinne aufnehmen / verstehen im engsten sinne kommunizieren gegenmittel ist exakte grenze aufzeigen \"so viel habe ich gesagt und nicht mehr\" frage kontern frage ins allgemeine ziehen und dort beantworten zB mathematische these => tr\u00fcglichkeit menschliches wissens als gleich mit streitfrage ansehen (somit fehlt etablierung) argumente kontern ad hominem falls m\u00f6glich (weil einfacher) gegenbeispiel f\u00fcr \"alle ...\" finden technische begr\u00fcndung (nicht nachvollziehbar f\u00fcr publikum) argument umdrehen argument versuchen in andere richtung zu brauchen \"kind darf bl\u00f6des machen\" => \"bestrafen verhindert gewohnheit\" argument \"nicht verstehen\" aus h\u00f6hrer stellung behaupten argument ist unverst\u00e4ndlich gegenmittel \"entschuldigt meine ungl\u00fcckliche darstellung\" dann erneut in sehr einfachen worten erkl\u00e4ren argument schubladisieren mit verhasster kategorie in verbindung bringen die nach allgemeiner auffassung vollst\u00e4ndig wiederlegt ist zB \"naziideologie\", \"kommunismus\", ...","title":"pr\u00e4misse wiederlegen (defense)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#schlussfolgerung-attack","text":"schluss schnell ziehen um m\u00e4ngel in argumentation verdecken direkt als zugestanden behandeln (statt best\u00e4tigen lassen) pr\u00e4missen verallgemeinern etablierte einzelf\u00e4lle allgemein g\u00fcltig auffassen zB unsicherheit medizin => unsicherheit alles wissens pr\u00e4missen uminterpretieren (homonomie) ohne pr\u00e4missen ziehen auch ohne etablierte pr\u00e4missen schlussfolgerung ziehen schnell argumentieren & selbstbewusst behaupten publikum m\u00f6gl. kein \u00fcberblick / zu langsame reaktionszeit","title":"schlussfolgerung (attack)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#schlussfolgerung-defense","text":"pr\u00e4missen f\u00fcr schlussfolgerung nicht anerkennen schlechte pr\u00e4missen entkr\u00e4ftigen fallunterscheidung einf\u00fchren (doppelbedeutung, heterogenit\u00e4t) wiederlegen um damit (scheinbar) theorie zu wiederlegen streitfrage verschieben in anderes thema \u00fcbergehen anderes aspekt der thematik ansprechen ad hominem / ad personam argumente anfangen theorie != praxis argumentieren \"mag in der theorie stimmen aber nicht in der praxis\" entgegnen dass dann auch theorie falsch sein m\u00fcsste","title":"schlussfolgerung (defense)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#ad-hominem-angriff","text":"aussagen des gegners uminterpretieren und gegen ihn nutzen homonomie (mehrdeutiges wort uminterpretieren) bei wort mit mehreren bedeutungen eine andere verstehen andere bedeutung als pr\u00e4misse / ad hominem nutzen gegenmittel ist synonym verwenden / klarifizieren relative behauptung allgemein interpretieren aussage aus spezifischem kontext allgemein auffassen zB \"masken sind gut\" im kontext vom arbeitsplatz entgegnen mit \"masken draussen sinnlos\" gegenmittel ist kontext klarifizieren","title":"ad hominem (angriff)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#ad-personam-angriff","text":"zornig machen durch unrecht, unversch\u00e4mtheit, schikane weil gegner ausserstande im zorn richtig zu urteilen (vermeindliche) wiederspr\u00fcche aufdecken wiedersprechende argumente aufzeigen inkonsistentes handeln anprangern starke reaktion auf argument/frage provozieren ausweichman\u00f6ver / zornig werden weist auf schwachen punkt hin nachhacken um argumentationsl\u00fccke zu finden / zornig zu machen argumente kontern wiederspruch mit pers\u00f6nlichem stand / handlung gegners aufzeigen wiederspruch mit interessen gegners aufzeigen gruppen bilden gruppenzugeh\u00f6rigkeit (oder eben auch nicht) ausnutzen wenn mehrheit des publikums in anderer gruppe ist technisch werden technische wortschwall den gegner nicht versteht als beweis vorgaukeln verunsichterter gegner m\u00f6gl. kein gegenargument zur hand","title":"ad personam (angriff)"},{"location":"communicate/books/die%20kunst%20recht%20zu%20behalten/#ad-personam-verteidigung","text":"pers\u00f6nliche vorw\u00fcrfe kontern entkr\u00e4ften, nicht stehen lassen (da eingest\u00e4ndnis) zB \"das tut nicht zur sache\", \"das ist nicht wahr\" gegenattacke nicht sinnvoll (da erneute retaliation)","title":"ad personam (verteidigung)"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/","text":"four types of human behaviour introduction communication happens on listeners terms understand listener to adapt communication patterns normal behaviour is observable, understandable, predictable, changeable dimensions task-oriented vs relationship-oriented passive (reserved) vs active (implementing) collaboration same dimension simplifies communication but for optimal results, need all aspects dominant (red) active task-oriented quick, happy to take command, make things happen but control freaks, trample on people's toes executives properties quick reaction maximum effort to control minimal interest for caution in relationships current time frame direct action tendency to avoid involvement adjectives aggressive, controlling strong-willed, pushing, decisive, opinionated goal-oriented, performance-oriented, results-oriented convincing, pioneer, innovator, problem-solver, initiator, ambitious straightforward, impatient negative rash & dominant, fiery temper arrogant, egoistical aggressive & controlling blunt & directness hurts other's feelings wants control over others details ignored overconfident want to win discussion positive bold & ambitious honest & blunt about own opinions focus on essential tasks & getting them done opinion on everything even difficult tasks taken on gladly does not care about prestige as does not care what others think position of power as means to end (take decisions) convincing due to strong believe in own (potentially wrong) opinions body language firm, controlling, distancing, aggressive strong, convincing voice adapt be quick & blunt stick to business & the topic at hand hold against pressure, never allow disrespect make hard work visible change behaviours force to care about details, wait for others, avoid excessive risks by explaining how time / benefit was lost in the past 0-tolerance against asocial behaviour, force to small talk stress factors no authority, challenges, results, all is routine & inefficient release stress with some form of competition / exercise inspiring (yellow) active relation-oriented amusing, creative, elevate mood but prevent others from entering conversation, untrue stories sales people properties rapid reaction maximum effort to involve minimal interest in routine future time frame impulsive action tendency to reject isolation adjectives encouraging, enthusiastic, persuasive, inspiring, optimistic creative, expressive, imaginative opinionated needs attention, sensitive, self-centred, talkative communicative, social, charming spontaneous, adaptable, flexible negative (overly) optimistic & self-confident bad listers, talks too much very hard to receive feedback (gets defensive, forgets it fast again) chaotic, hardly keeps track of things neglects details, rarely finishes projects arrive late and never acknowledge it (or say sorry) unable to concentrate or focus on a project positive (overly) optimistic, do whatever is fun entertaining creating relationships creative in finding new solutions persuasive body language relaxed, friendly, expressive gestures, come close body contact to reinforce point empathy clearly shown fast speaking adapt keep yellow happy for productivity start with big questions to avoid boring details sell stuff with \"state-of-the-art\" as novelty is loved be approachable to gain trust & productivity change behaviours force to agree to specific plan & write it down explain consequences clearly of being late & have backup plan help to structure & organize stuff time very outgoing behaviours motivate by explaining how much popularity can be gained from it give negative feedback in small batches, determined & well prepared stress factors pretend invisibility, be negative / sceptival push for structure, considering details separate from rest of group, publicly humiliate relieve stress by organizing party / fun activity stable (green) passive relation-oriented easy-going, pleasant, genuinely care for others but too unclear, indecisive public sector properties calm reaction maximum effort for connection minimal interest in change current time frame supportive action tendency to reject conflict adjectives stable, patient, relaxed, self-controlled, composed, conceals feelings loyal, reliable modest, discreet, producer, persistent understanding, supportive, good listener, helpful, thoughtful negative never changes views does not really care about anything prefers to avoid work avoids responsibility, prefers clumsy statements unable to adapt to changes does not speak about problems to avoid work / conflict positive balanced, easy to deal with, tolerant authentic relationship focused keep calm and carry on does not want to be inconvenient listens well body language relaxed small-scale gestures slow, quiet voice adapt acknowledge fears (dont deny), keep nudging encourage brave behaviours plan yourself, explain it detailed to green asking for feedback change behaviours feedback with concrete things to improve formulate change as the only solution take enough time for each single change stress factors strip security & private space push into spotlight make clear an agreement is not possible release stress by giving time to do nothing analytical (blue) passive task-oriented calm, thing before they speak but suspicious, pessimistic properties slow reaction maximum effort to organize minimal interest in relationships historical time frame cautious action tendency to avoid involvement adjectives systematic, methodical, follows rules, structured, analytical, logical objective, seeks facts, questioning, scrutinizes, correct, quality oriented distant, perfectionist, conventional, needs time, reflecting negative conservative, tedious lacking independence not able to settle for \"good enough\" appear cold, hard to get to know no small talk \"better safe than sorry\" taking to extremes standards of proof are (unreasonably) high positive analysis in the background about the why sees errors & risk pedantic modesty miss the big picture decisions only taken after all facts none risk averse, quality first-class citizen can repeat same tasks multitude without getting crazy follow strict rules & very organized silence is golden (no need to be heard) body language prefer others at a distance speak without guestures little variation in voice & expression adapt be prepared to give exact answers to everything do one task at a time stick to the facts avoid negative formulations praise for exact, high quality work change behaviours explain criticality not always welcome / futile point to big pictures, give clear time constraints force taking a decision by pointing out negatives from not doing so stress factors deny expert knowledge, force to take high risks have spontaneous decisions, unannouced events surround with overly emotional people relieve stress by giving space body language posture relaxed, natural for self-confidence shrunken for resignation gaze shifty eyes to want to be somewhere else closed eyes to think horizon look to remember shift to the side could be lying hands touching neck / excessive movement as insecurity (lying?) lift up to face when in awful/unpleasant situation head speaking induces shaking / nodding discussions might lead to lean to the side raise eyebrows for amazement hand shake limb/feeble for submissive behaviour firm for determination too hard for fake determination feedback give very concrete examples & stick to the facts let person repeat what was being sad explaining only behaviour (not person) disliked blue specific, detailed examples in writing red avoid decorative wrappings stay calm and unimpressed by pushback green gentle with concrete examples yellow follow clearly set agenda massage ego & put words into mouth written communication mirror style (concise? friendly?) other models greeks (hippocrates) humoral pathology melancholic as blue, choleric as red phlegmatic (sluggish) as green, sanguine (blood) as yellow aztecs fire (leaders, hotheats) air (determined but easygoing) earth (collective, stability) water (quiet, observing) DISC dominance (approach to problems & challenges) inspiration (cooperation & influence over people) stability (response to change) compliance (response to rules & regulations)","title":"four types of human behaviour"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#four-types-of-human-behaviour","text":"","title":"four types of human behaviour"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#introduction","text":"communication happens on listeners terms understand listener to adapt communication patterns normal behaviour is observable, understandable, predictable, changeable dimensions task-oriented vs relationship-oriented passive (reserved) vs active (implementing) collaboration same dimension simplifies communication but for optimal results, need all aspects","title":"introduction"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#dominant-red","text":"active task-oriented quick, happy to take command, make things happen but control freaks, trample on people's toes executives properties quick reaction maximum effort to control minimal interest for caution in relationships current time frame direct action tendency to avoid involvement adjectives aggressive, controlling strong-willed, pushing, decisive, opinionated goal-oriented, performance-oriented, results-oriented convincing, pioneer, innovator, problem-solver, initiator, ambitious straightforward, impatient negative rash & dominant, fiery temper arrogant, egoistical aggressive & controlling blunt & directness hurts other's feelings wants control over others details ignored overconfident want to win discussion positive bold & ambitious honest & blunt about own opinions focus on essential tasks & getting them done opinion on everything even difficult tasks taken on gladly does not care about prestige as does not care what others think position of power as means to end (take decisions) convincing due to strong believe in own (potentially wrong) opinions body language firm, controlling, distancing, aggressive strong, convincing voice adapt be quick & blunt stick to business & the topic at hand hold against pressure, never allow disrespect make hard work visible change behaviours force to care about details, wait for others, avoid excessive risks by explaining how time / benefit was lost in the past 0-tolerance against asocial behaviour, force to small talk stress factors no authority, challenges, results, all is routine & inefficient release stress with some form of competition / exercise","title":"dominant (red)"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#inspiring-yellow","text":"active relation-oriented amusing, creative, elevate mood but prevent others from entering conversation, untrue stories sales people properties rapid reaction maximum effort to involve minimal interest in routine future time frame impulsive action tendency to reject isolation adjectives encouraging, enthusiastic, persuasive, inspiring, optimistic creative, expressive, imaginative opinionated needs attention, sensitive, self-centred, talkative communicative, social, charming spontaneous, adaptable, flexible negative (overly) optimistic & self-confident bad listers, talks too much very hard to receive feedback (gets defensive, forgets it fast again) chaotic, hardly keeps track of things neglects details, rarely finishes projects arrive late and never acknowledge it (or say sorry) unable to concentrate or focus on a project positive (overly) optimistic, do whatever is fun entertaining creating relationships creative in finding new solutions persuasive body language relaxed, friendly, expressive gestures, come close body contact to reinforce point empathy clearly shown fast speaking adapt keep yellow happy for productivity start with big questions to avoid boring details sell stuff with \"state-of-the-art\" as novelty is loved be approachable to gain trust & productivity change behaviours force to agree to specific plan & write it down explain consequences clearly of being late & have backup plan help to structure & organize stuff time very outgoing behaviours motivate by explaining how much popularity can be gained from it give negative feedback in small batches, determined & well prepared stress factors pretend invisibility, be negative / sceptival push for structure, considering details separate from rest of group, publicly humiliate relieve stress by organizing party / fun activity","title":"inspiring (yellow)"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#stable-green","text":"passive relation-oriented easy-going, pleasant, genuinely care for others but too unclear, indecisive public sector properties calm reaction maximum effort for connection minimal interest in change current time frame supportive action tendency to reject conflict adjectives stable, patient, relaxed, self-controlled, composed, conceals feelings loyal, reliable modest, discreet, producer, persistent understanding, supportive, good listener, helpful, thoughtful negative never changes views does not really care about anything prefers to avoid work avoids responsibility, prefers clumsy statements unable to adapt to changes does not speak about problems to avoid work / conflict positive balanced, easy to deal with, tolerant authentic relationship focused keep calm and carry on does not want to be inconvenient listens well body language relaxed small-scale gestures slow, quiet voice adapt acknowledge fears (dont deny), keep nudging encourage brave behaviours plan yourself, explain it detailed to green asking for feedback change behaviours feedback with concrete things to improve formulate change as the only solution take enough time for each single change stress factors strip security & private space push into spotlight make clear an agreement is not possible release stress by giving time to do nothing","title":"stable (green)"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#analytical-blue","text":"passive task-oriented calm, thing before they speak but suspicious, pessimistic properties slow reaction maximum effort to organize minimal interest in relationships historical time frame cautious action tendency to avoid involvement adjectives systematic, methodical, follows rules, structured, analytical, logical objective, seeks facts, questioning, scrutinizes, correct, quality oriented distant, perfectionist, conventional, needs time, reflecting negative conservative, tedious lacking independence not able to settle for \"good enough\" appear cold, hard to get to know no small talk \"better safe than sorry\" taking to extremes standards of proof are (unreasonably) high positive analysis in the background about the why sees errors & risk pedantic modesty miss the big picture decisions only taken after all facts none risk averse, quality first-class citizen can repeat same tasks multitude without getting crazy follow strict rules & very organized silence is golden (no need to be heard) body language prefer others at a distance speak without guestures little variation in voice & expression adapt be prepared to give exact answers to everything do one task at a time stick to the facts avoid negative formulations praise for exact, high quality work change behaviours explain criticality not always welcome / futile point to big pictures, give clear time constraints force taking a decision by pointing out negatives from not doing so stress factors deny expert knowledge, force to take high risks have spontaneous decisions, unannouced events surround with overly emotional people relieve stress by giving space","title":"analytical (blue)"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#body-language","text":"posture relaxed, natural for self-confidence shrunken for resignation gaze shifty eyes to want to be somewhere else closed eyes to think horizon look to remember shift to the side could be lying hands touching neck / excessive movement as insecurity (lying?) lift up to face when in awful/unpleasant situation head speaking induces shaking / nodding discussions might lead to lean to the side raise eyebrows for amazement hand shake limb/feeble for submissive behaviour firm for determination too hard for fake determination","title":"body language"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#feedback","text":"give very concrete examples & stick to the facts let person repeat what was being sad explaining only behaviour (not person) disliked blue specific, detailed examples in writing red avoid decorative wrappings stay calm and unimpressed by pushback green gentle with concrete examples yellow follow clearly set agenda massage ego & put words into mouth","title":"feedback"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#written-communication","text":"mirror style (concise? friendly?)","title":"written communication"},{"location":"communicate/books/four%20types%20of%20human%20behaviour/#other-models","text":"greeks (hippocrates) humoral pathology melancholic as blue, choleric as red phlegmatic (sluggish) as green, sanguine (blood) as yellow aztecs fire (leaders, hotheats) air (determined but easygoing) earth (collective, stability) water (quiet, observing) DISC dominance (approach to problems & challenges) inspiration (cooperation & influence over people) stability (response to change) compliance (response to rules & regulations)","title":"other models"},{"location":"communicate/books/getting%20to%20yes/","text":"getting to yes types unnecessary conflicts different interests but same goals different interests but non-conflicting goals simply avoid reduce by not sharing irrelevant opinions reduce by not being too honest / clear about interests smoldering conflicts out of desire to not embarass others / preserve harmony but conflicting goals & interests initiate as only gets worse active conflicts open disagreements of goals & interests initiate as only gets worse about arguments thinking in right or wrong not helpful in conflicts \"winning\" arguments two opposing opinions means one is wrong hence opponents lecture or judge the other little time for logical reasoning as must come up with next argument to \"destroy\" the opponent decompose arguments each contains facts, self revelations, relationships and call to actions facts and relationship are often mixed leading to discussions about the facts but problem is relationship imbalance of impression cause of action seems reasonable within the context but are judged without context and credited to character way of reasoning seems assertive, communicative like being careful or strong in an argument but may seem ruthless, talkative like a coward, or a know-it-all judgment focus on specific aspects but conclusions may differ as different aspects observed change proposals seem cautious and reasonable but may radically interpreted until clearly negative principles of communication separate knowledge from interpretation differentiate what you know and what you concluded be aware of the unknown unknowns clearly communicate expectations define deliverables & their relative importance define responsibilities and how deviations are handled invest time to clarify these points (as later more costly) constructive feedback give positive feedback whenever appropriate, be aware that positive behaviours are harder to detect choose quiet/relaxes location & time frame to be able to focus let the receiver prepare internally by asking multiple times (\"i would like to give feedback to ...\", \"is now a good time\") give be respectful describe specific behaviours do not evaluate, instead describe how it affects oneself (\"I have a problem with this because ...\") propose alternative and justify the interests do not evaluate or focus on character take be relaxed and thankful actively listen (let other finish speaking, be curious & ask for clarifications if needed) do not defend, justify reflect & draw conclusions / change behaviours non-violent communication observe facts (\"i see there are used socks on the floor\") note feelings (\"this makes me uncomfortable\") uncover desires (\"i want order in the house\") make explicit requests (\"would you be willing to put these away?\") mirror/interview conversations others most likely to change if arrived at conclusion by themselves can guide by \"interviewing\" them needs high attention, sensitivity and fast thinking. guidelines ask neutral question summarize continuously the brought up points without assessing them confirm that the summary is complete and accurate proceed with the next questions address unspoken conflicts check for signs of suppressed aggressions or otherwise unhealthy behaviours avoid to interpret & assess, instead only describe what you see/feel tools observations (\"I can see that you frizzy your forehead\") without interpretation (\"you are annoyed\") subjective interpretation (\"it seems to me that you are not convinced\") questions about the view of the other (\"what do you think about the proposal\") resolve conflict the \"discover mode\" always assume good intentions investigate point of view of the other show interest, respect, try to understand perspective summarize understood points and ask for confirmation then ask to summarize own point of view formulations to avoid accusations (\"you\") claiming objectivity (\"it is obvious\") usage of micro-aggressions (\"unrealistic\") usage of generalizations (\"always\", \"never\") demanding/prohibiting (\"you can not seriously think ...\"). constructively disagree clearly show what follows are own points of view formulate interests, expectations and opinions like \"I see this differently\", \"I assume our customers ...\", \"I am angry\"). then call to action (\"lets find out\", \"what is your point of view\"). stop attacks do not ignore (because attacker may continue) do not defend (because may escalate) acknowledge the attack (but only as little as needed to stop them) shift focus back on subject deescalate calm down internally (sit down, breath deeply) observe and describe current situation/communication pattern like \"we are annoying each other because ...\" appeal to noble cause of each participant like \"we are all here because we ...\" then propose to focus on interests & targets like \"how can we reach our target of...\" interest based discussion preserve face as interests do not change only positions need to","title":"getting to yes"},{"location":"communicate/books/getting%20to%20yes/#getting-to-yes","text":"","title":"getting to yes"},{"location":"communicate/books/getting%20to%20yes/#types","text":"unnecessary conflicts different interests but same goals different interests but non-conflicting goals simply avoid reduce by not sharing irrelevant opinions reduce by not being too honest / clear about interests smoldering conflicts out of desire to not embarass others / preserve harmony but conflicting goals & interests initiate as only gets worse active conflicts open disagreements of goals & interests initiate as only gets worse","title":"types"},{"location":"communicate/books/getting%20to%20yes/#about-arguments","text":"thinking in right or wrong not helpful in conflicts \"winning\" arguments two opposing opinions means one is wrong hence opponents lecture or judge the other little time for logical reasoning as must come up with next argument to \"destroy\" the opponent decompose arguments each contains facts, self revelations, relationships and call to actions facts and relationship are often mixed leading to discussions about the facts but problem is relationship","title":"about arguments"},{"location":"communicate/books/getting%20to%20yes/#imbalance-of-impression","text":"cause of action seems reasonable within the context but are judged without context and credited to character way of reasoning seems assertive, communicative like being careful or strong in an argument but may seem ruthless, talkative like a coward, or a know-it-all judgment focus on specific aspects but conclusions may differ as different aspects observed change proposals seem cautious and reasonable but may radically interpreted until clearly negative","title":"imbalance of impression"},{"location":"communicate/books/getting%20to%20yes/#principles-of-communication","text":"separate knowledge from interpretation differentiate what you know and what you concluded be aware of the unknown unknowns clearly communicate expectations define deliverables & their relative importance define responsibilities and how deviations are handled invest time to clarify these points (as later more costly)","title":"principles of communication"},{"location":"communicate/books/getting%20to%20yes/#constructive-feedback","text":"give positive feedback whenever appropriate, be aware that positive behaviours are harder to detect choose quiet/relaxes location & time frame to be able to focus let the receiver prepare internally by asking multiple times (\"i would like to give feedback to ...\", \"is now a good time\") give be respectful describe specific behaviours do not evaluate, instead describe how it affects oneself (\"I have a problem with this because ...\") propose alternative and justify the interests do not evaluate or focus on character take be relaxed and thankful actively listen (let other finish speaking, be curious & ask for clarifications if needed) do not defend, justify reflect & draw conclusions / change behaviours non-violent communication observe facts (\"i see there are used socks on the floor\") note feelings (\"this makes me uncomfortable\") uncover desires (\"i want order in the house\") make explicit requests (\"would you be willing to put these away?\")","title":"constructive feedback"},{"location":"communicate/books/getting%20to%20yes/#mirrorinterview-conversations","text":"others most likely to change if arrived at conclusion by themselves can guide by \"interviewing\" them needs high attention, sensitivity and fast thinking. guidelines ask neutral question summarize continuously the brought up points without assessing them confirm that the summary is complete and accurate proceed with the next questions","title":"mirror/interview conversations"},{"location":"communicate/books/getting%20to%20yes/#address-unspoken-conflicts","text":"check for signs of suppressed aggressions or otherwise unhealthy behaviours avoid to interpret & assess, instead only describe what you see/feel tools observations (\"I can see that you frizzy your forehead\") without interpretation (\"you are annoyed\") subjective interpretation (\"it seems to me that you are not convinced\") questions about the view of the other (\"what do you think about the proposal\")","title":"address unspoken conflicts"},{"location":"communicate/books/getting%20to%20yes/#resolve-conflict","text":"the \"discover mode\" always assume good intentions investigate point of view of the other show interest, respect, try to understand perspective summarize understood points and ask for confirmation then ask to summarize own point of view formulations to avoid accusations (\"you\") claiming objectivity (\"it is obvious\") usage of micro-aggressions (\"unrealistic\") usage of generalizations (\"always\", \"never\") demanding/prohibiting (\"you can not seriously think ...\"). constructively disagree clearly show what follows are own points of view formulate interests, expectations and opinions like \"I see this differently\", \"I assume our customers ...\", \"I am angry\"). then call to action (\"lets find out\", \"what is your point of view\"). stop attacks do not ignore (because attacker may continue) do not defend (because may escalate) acknowledge the attack (but only as little as needed to stop them) shift focus back on subject deescalate calm down internally (sit down, breath deeply) observe and describe current situation/communication pattern like \"we are annoying each other because ...\" appeal to noble cause of each participant like \"we are all here because we ...\" then propose to focus on interests & targets like \"how can we reach our target of...\" interest based discussion preserve face as interests do not change only positions need to","title":"resolve conflict"},{"location":"communicate/books/never%20split%20the%20difference/","text":"never split the difference communicate actively especially important for person in weaker position understand listen intensively show empathy and sincere desire to understand validate emotions by acknowledging it (\"it sounds like\") repeat last 3 words / main points to signal understanding explain \"stop me at any time you feel it is unfair\" trigger no's helps to feel in control \"is now a bad time to talk\" \"have you given up on the project\" negotiation preparation leverage positive (something they want) negative (can make them suffer; loss aversion makes this more powerful) normative (where other partie's values conflict) reflect choice of words choice of clothes beliefs & ideas negotiation one-sheet set optimistic but realistic goal, discuss with others & write it down summarize known facts that lead up to the negotation also include non-cash offers get information perform accusation audit interesting information who do they report to what is their audience (team / environment) what signifies status / reputation what most worries them what are their (personal) dreams calibrated questions to reveal interests & overcome deal killers what makes you ask what about the deal is important to you how can I make this better for us how would you like me to proceed how can we solve the problem how will we know we are on track how do we address things if we find we are off track accusation audit confirm suspicions like \"it seems like ... is valuable to you\" ungarded moments observe behaviour when felt unobserved like before / after meetings, interruptions, ... price negotiations accusation audit \"You are going to be insulted by my offer\" \"I am embarrassed to tell you my offer\" \"You are going to think I have not done my homework\" anchoring (unfair) give extreme anchor to set the stage compare with similar deals in high range anchoring (fair) use precise calculated (eg non-round) numbers let other suggest first (might be higher than what was hoped for) add non-monetary things deflect anchor answer with own unreasonable anchor restart from principles (\"what are we trying to accomplish\") non-monetary (\"what else can you offer to make this a good deal\") decrease offer in decreasing steps, like 65% -> 85% -> 95% -> 100% add non-monetary offer at limit use own name what is the florian's discount? stuck negotiations getting a no what about this does not work for you what do you need to make it work reason for unrealistic expectations ill-informed constrained hidden interests loss/risk aversion clarify what is lost when deal is not striken imaginary (profits) or real (turn off installation) rejection \"thank you for taking the time to talk to me\" \"that is more than fair\" \"but just does not work for me / I cannot do that\"","title":"never split the difference"},{"location":"communicate/books/never%20split%20the%20difference/#never-split-the-difference","text":"","title":"never split the difference"},{"location":"communicate/books/never%20split%20the%20difference/#communicate-actively","text":"especially important for person in weaker position understand listen intensively show empathy and sincere desire to understand validate emotions by acknowledging it (\"it sounds like\") repeat last 3 words / main points to signal understanding explain \"stop me at any time you feel it is unfair\" trigger no's helps to feel in control \"is now a bad time to talk\" \"have you given up on the project\"","title":"communicate actively"},{"location":"communicate/books/never%20split%20the%20difference/#negotiation-preparation","text":"leverage positive (something they want) negative (can make them suffer; loss aversion makes this more powerful) normative (where other partie's values conflict) reflect choice of words choice of clothes beliefs & ideas negotiation one-sheet set optimistic but realistic goal, discuss with others & write it down summarize known facts that lead up to the negotation also include non-cash offers","title":"negotiation preparation"},{"location":"communicate/books/never%20split%20the%20difference/#get-information","text":"perform accusation audit interesting information who do they report to what is their audience (team / environment) what signifies status / reputation what most worries them what are their (personal) dreams calibrated questions to reveal interests & overcome deal killers what makes you ask what about the deal is important to you how can I make this better for us how would you like me to proceed how can we solve the problem how will we know we are on track how do we address things if we find we are off track accusation audit confirm suspicions like \"it seems like ... is valuable to you\" ungarded moments observe behaviour when felt unobserved like before / after meetings, interruptions, ...","title":"get information"},{"location":"communicate/books/never%20split%20the%20difference/#price-negotiations","text":"accusation audit \"You are going to be insulted by my offer\" \"I am embarrassed to tell you my offer\" \"You are going to think I have not done my homework\" anchoring (unfair) give extreme anchor to set the stage compare with similar deals in high range anchoring (fair) use precise calculated (eg non-round) numbers let other suggest first (might be higher than what was hoped for) add non-monetary things deflect anchor answer with own unreasonable anchor restart from principles (\"what are we trying to accomplish\") non-monetary (\"what else can you offer to make this a good deal\") decrease offer in decreasing steps, like 65% -> 85% -> 95% -> 100% add non-monetary offer at limit use own name what is the florian's discount?","title":"price negotiations"},{"location":"communicate/books/never%20split%20the%20difference/#stuck-negotiations","text":"getting a no what about this does not work for you what do you need to make it work reason for unrealistic expectations ill-informed constrained hidden interests loss/risk aversion clarify what is lost when deal is not striken imaginary (profits) or real (turn off installation) rejection \"thank you for taking the time to talk to me\" \"that is more than fair\" \"but just does not work for me / I cannot do that\"","title":"stuck negotiations"},{"location":"communicate/books/online%20interaktionen/","text":"online interaktionen spiele vorhang auf teilnehmende nehmen post-it und decken kamera ab frage stellen, falls zutreffend, dann aufdecken ansprechen schema X teilnehmende schema aufzeichnen lassen (wie tabelle) in diesem format kann w\u00e4hrend des kurses zusammenfassung geschrieben werden notiz machen, in einer zeile 6 richtige \"aktivierung von vorwissen\" teilnehmende schreiben 6 begriffe auf die wahrscheinlich kommen werden aufrufen und bitten einer der begriffe vorzulesen \"wir begeben uns in neues gebiet\" um druck abzubauen zeichen hinterlassen mehrere optionen anbieten favorisierte ausw\u00e4hlen lassen teilnehmende fragen welche option ausgew\u00e4hlt & warum nsr gehrn snd clvr unvollst\u00e4ndige w\u00f6rter (zB keine vokale) teilnehmende schreiben schnellstm\u00f6glich in chat was es ist vorher minigame; \"ich bin bereit\" in chat schreiben frage weitergeben liste von fragen die nacheinander beantwortet werden teilnehmende k\u00f6nnen \"frage weitergeben\" wenn nicht beantworten m\u00f6chten drehen und wenden sortieren (gr\u00f6sse, wichtigkeit, ...) in teams zB auf https://padlet.com/; forms in teams zur aktivierung schwacher studierender, helfen untereinander gruppenl\u00f6sung, weniger als einzelperon gut f\u00fcr grosse gruppen stichwortsalat begriffe gegenseitig erkl\u00e4ren dann andere erg\u00e4nzen weitere infos -> \u00e4hnliches konzept um fragen zu beantworten grosse gruppen je gr\u00f6sser desto gehemmter jede & jeder f\u00fcr sich breakouts m\u00f6gliche arbeitsformen im online-seminar mit anderen austauschen sprechen und h\u00f6ren (aktivierung bes. bei grossen gruppen) schreiben und lesen (chat etc) jede und jeder f\u00fcr sich (pers\u00f6nl. aufgabe)","title":"online interaktionen"},{"location":"communicate/books/online%20interaktionen/#online-interaktionen","text":"","title":"online interaktionen"},{"location":"communicate/books/online%20interaktionen/#spiele","text":"vorhang auf teilnehmende nehmen post-it und decken kamera ab frage stellen, falls zutreffend, dann aufdecken ansprechen schema X teilnehmende schema aufzeichnen lassen (wie tabelle) in diesem format kann w\u00e4hrend des kurses zusammenfassung geschrieben werden notiz machen, in einer zeile 6 richtige \"aktivierung von vorwissen\" teilnehmende schreiben 6 begriffe auf die wahrscheinlich kommen werden aufrufen und bitten einer der begriffe vorzulesen \"wir begeben uns in neues gebiet\" um druck abzubauen zeichen hinterlassen mehrere optionen anbieten favorisierte ausw\u00e4hlen lassen teilnehmende fragen welche option ausgew\u00e4hlt & warum nsr gehrn snd clvr unvollst\u00e4ndige w\u00f6rter (zB keine vokale) teilnehmende schreiben schnellstm\u00f6glich in chat was es ist vorher minigame; \"ich bin bereit\" in chat schreiben frage weitergeben liste von fragen die nacheinander beantwortet werden teilnehmende k\u00f6nnen \"frage weitergeben\" wenn nicht beantworten m\u00f6chten drehen und wenden sortieren (gr\u00f6sse, wichtigkeit, ...) in teams zB auf https://padlet.com/; forms in teams zur aktivierung schwacher studierender, helfen untereinander gruppenl\u00f6sung, weniger als einzelperon gut f\u00fcr grosse gruppen stichwortsalat begriffe gegenseitig erkl\u00e4ren dann andere erg\u00e4nzen weitere infos -> \u00e4hnliches konzept um fragen zu beantworten","title":"spiele"},{"location":"communicate/books/online%20interaktionen/#grosse-gruppen","text":"je gr\u00f6sser desto gehemmter jede & jeder f\u00fcr sich breakouts","title":"grosse gruppen"},{"location":"communicate/books/online%20interaktionen/#mogliche-arbeitsformen-im-online-seminar","text":"mit anderen austauschen sprechen und h\u00f6ren (aktivierung bes. bei grossen gruppen) schreiben und lesen (chat etc) jede und jeder f\u00fcr sich (pers\u00f6nl. aufgabe)","title":"m\u00f6gliche arbeitsformen im online-seminar"},{"location":"communicate/books/thinking%20fast%20and%20slow/","text":"thinking fast and slow two systems system 1 for intuition, automatic decisions little effort, but little control system 2 for logical thinking, complex decisions high accuracy, but high effort major fallacies priming (nudging, associations influence decisions) cognitive ease (easy wins; like old ideas, clear presentation) easy even wins when the falsehood has been proven to be false jumping to conclusions (\"what you see is all there is\", confirmation bias) answering easier questions (simplify, sometimes too much, questions) law of small numbers (believe in conclusions drawn from too small samples) anchors (clinging to some, any!, number to compare to) availability (recent / vivid experience skews decision) more strongly with impulsive, intuition guided people wrong statistics (miscalculating bayesian probabilities) regression to mean (mistakenly looking for casual explanation for out-of-norm) illusion of understanding (causality looked for where none exist) illusion of validity (experts overjudge their expertise) planning fallacy (too optimistic planning, no consideration for unknown unknowns) entrepreneurial delusion (ignorance of competition) prospect theory valuation judged differently depending on anchors like 10mio different for rich & poor person probabilities judged wrongly like small judged too high loss aversion (risk averse for unsure loss, risk seeking for sure loss) the contrary for gains","title":"thinking fast and slow"},{"location":"communicate/books/thinking%20fast%20and%20slow/#thinking-fast-and-slow","text":"","title":"thinking fast and slow"},{"location":"communicate/books/thinking%20fast%20and%20slow/#two-systems","text":"system 1 for intuition, automatic decisions little effort, but little control system 2 for logical thinking, complex decisions high accuracy, but high effort","title":"two systems"},{"location":"communicate/books/thinking%20fast%20and%20slow/#major-fallacies","text":"priming (nudging, associations influence decisions) cognitive ease (easy wins; like old ideas, clear presentation) easy even wins when the falsehood has been proven to be false jumping to conclusions (\"what you see is all there is\", confirmation bias) answering easier questions (simplify, sometimes too much, questions) law of small numbers (believe in conclusions drawn from too small samples) anchors (clinging to some, any!, number to compare to) availability (recent / vivid experience skews decision) more strongly with impulsive, intuition guided people wrong statistics (miscalculating bayesian probabilities) regression to mean (mistakenly looking for casual explanation for out-of-norm) illusion of understanding (causality looked for where none exist) illusion of validity (experts overjudge their expertise) planning fallacy (too optimistic planning, no consideration for unknown unknowns) entrepreneurial delusion (ignorance of competition)","title":"major fallacies"},{"location":"communicate/books/thinking%20fast%20and%20slow/#prospect-theory","text":"valuation judged differently depending on anchors like 10mio different for rich & poor person probabilities judged wrongly like small judged too high loss aversion (risk averse for unsure loss, risk seeking for sure loss) the contrary for gains","title":"prospect theory"},{"location":"communicate/courses/decisions/","text":"Decisions effectively take decisions You may not know yet the decision you need to take; work them out in a meeting . Poll for small, fully understood problems Let the majority win. Potentially save the acceptance rate in the form of coloured dots, to be able to come back to it later if necessary. Discourse for complex problems, small groups Let the best argument win. Hand out problem beforehand, and allow members to work out arguments. Let neutral present the arguments to disconnect them from the person. Consensus for unimportant problems, small groups Talk until consensus is reached, potentially reaching a win-win. Consent for complex problems Refine solution until no more arguments against it can be brought up. You may structure the process like this: Present proposition Answer questions Gather reactions from everybody Potentially refine proposition Ask everybody for any counter arguments; if found, refine again; else accept the proposition Veto for complex decision, weak leadership Let team to take decisions fully, but use veto if something goes \"wrong\". Systematic consent for unimportant problems, small groups Choose solution which provokes the littlest resistance / negative feelings. Consultative Decision for complex problems, big groups Choose someone to investigate and then take an informed decision. You may structure the process like this: Choose decision taker (choose the closest person to the problem as possible) Choose consultation partner (choose experts and those impacted most) Decision taker with the consultation partners Decision taker chooses the best solution taking full responsibility taking into account the advice from all the consultation partners ensuring its in the companies best interest Decision taker communicates the basis for the decision the decision itself why certain consultation partners were skipped why certain advice was overruled In exchange, the decision taker receives full support from all consultation partners for the decision feedback","title":"Decisions"},{"location":"communicate/courses/decisions/#decisions","text":"effectively take decisions You may not know yet the decision you need to take; work them out in a meeting .","title":"Decisions"},{"location":"communicate/courses/decisions/#poll","text":"for small, fully understood problems Let the majority win. Potentially save the acceptance rate in the form of coloured dots, to be able to come back to it later if necessary.","title":"Poll"},{"location":"communicate/courses/decisions/#discourse","text":"for complex problems, small groups Let the best argument win. Hand out problem beforehand, and allow members to work out arguments. Let neutral present the arguments to disconnect them from the person.","title":"Discourse"},{"location":"communicate/courses/decisions/#consensus","text":"for unimportant problems, small groups Talk until consensus is reached, potentially reaching a win-win.","title":"Consensus"},{"location":"communicate/courses/decisions/#consent","text":"for complex problems Refine solution until no more arguments against it can be brought up. You may structure the process like this: Present proposition Answer questions Gather reactions from everybody Potentially refine proposition Ask everybody for any counter arguments; if found, refine again; else accept the proposition","title":"Consent"},{"location":"communicate/courses/decisions/#veto","text":"for complex decision, weak leadership Let team to take decisions fully, but use veto if something goes \"wrong\".","title":"Veto"},{"location":"communicate/courses/decisions/#systematic-consent","text":"for unimportant problems, small groups Choose solution which provokes the littlest resistance / negative feelings.","title":"Systematic consent"},{"location":"communicate/courses/decisions/#consultative-decision","text":"for complex problems, big groups Choose someone to investigate and then take an informed decision. You may structure the process like this: Choose decision taker (choose the closest person to the problem as possible) Choose consultation partner (choose experts and those impacted most) Decision taker with the consultation partners Decision taker chooses the best solution taking full responsibility taking into account the advice from all the consultation partners ensuring its in the companies best interest Decision taker communicates the basis for the decision the decision itself why certain consultation partners were skipped why certain advice was overruled In exchange, the decision taker receives full support from all consultation partners for the decision feedback","title":"Consultative Decision"},{"location":"communicate/courses/speech/","text":"Rhetoric How to communicate ideas effectively. Prepared Speech A good talk has a good start and a good end, and they are as close together as possible. Ensure you identify with the subject, and can wholeheartedly defend it. Adapt to the audience Choose the right degree of detail (granularity, amount) under the circumstances. Find out their needs/pains and focus on the benefits (less work, more possibilities). Prepare for anticipated questions. General points Structure the talk well (leitmotif, decomposed; add breaks after important points). Make it as short as possible to reach your target. Add stimuli such as rhetorical questions, examples including your audience, direct speech, visual elements, tension and humour. Make it easy understandable (easy words, structured content, short, additional stimuli). Avoid challenging members on a personal level (through weak claims / avoiding answers). Concept Formulate a target for your speech as a single phrase; aligning your interests with the audience. Research the subject quantitatively and broad. Review research and remove material that does is not strictly needed to reach the target. Develop the argumentation while focusing on the meaning for the audience. Create the end of the talk which contains hands-on advice. Create the start of the talk. Manuscript Formulate start/end completely and learn by heart. Note down keywords for the rest on flashcards / sheet of paper. Mark rhetorical/dramaturgical effects. Patterns Use the you-form (\u201cyou can simply press here and then...\u201d). After explaining facts, go back to you form with rhetorical questions (\"what does this mean for you\", \"why do I explain this to you\"). Use analogies/images/questions to make the audience think. Use simple phrases. Place breaks after questions and important points. Make audience agree upon generally known facts (so they will accept new facts). Argumentation forms rational (use statistics, facts, logical reasoning) emotional (use concrete example, fear, feelings) tactical (assure to be object, but judge other arguments as incomparable) moral (use norms of the society, cite important personas, appeal to decency) plausibility (plead to tradition, exaggerate, appeal to \"common sense\") five-phrases essay (introduction, arguments, conclusion) position (declare position, argument for it, example, conclusion from example, plea to act) problem-solving (present the now, describe causes, present the should-be, describe acts, plea to act) special case (describe rule, describe exception, describe why exception part of the rule, describe why not, plea to act) comparison (present A, argue for A, present B, argue for B, combine or discard both) dialectic (fact, present A, present B, combine, conclude) new-aspect (introduction, summary of active outcome, introduce new aspect, evaluate new aspect conclude) questions (why am I speaking, what is going on, what should be, how can this be archived, what do we need to do mismatch (present A, present B, combine/discard both, present own solution, consequences) divergence (present A, reveal mistakes, present solution for this mistakes, present concept, plea to act) other techniques feature (what), advantage (why this is great) use (how can you benefit) yesterday, today, tomorrow Start Start strong (no apologies/complaints/overview/empty phrases). Focus the attention of the audience (news, joke, rhetorical question, citation, story, special item). Be convinced of whatever you do. End End strong (no apologies/thanks/announcement/invisible/conjuntictive). Use a short summary, give an outlook (yesterday/today/tomorrow, utilization, plea), ask a rhetorical question, connect with the start. Train Train including breaks & emphasis. Use simple language and short phrases. Record and replay. Talk How to behave before, after & during the talk. Venue Try out technical devices needed for the talk. Order needed material and lay it out. Ensure no attention seeking objects in you vicinity. Choose appropriate clothing. Directly before the talk Stick to your plan. Ensure you still know the first few phrases. Sit down, empty your head and breath calmly. Look forward to the talk or what comes after. Mindset It is natural to be nervous; just another challenge waiting to be beat. The talk happens even if you are not optimally prepared; you can not change the past. You are allowed to make mistakes, it does not have to be perfect. You know about the subject best. Play out your strengths and be aware of your weaknesses. Be courteous, kind, motivated. Ascent Walk slowly and certain, use the walk to dissipate excess energy from the stage fright. Upon arrival, wait a bit (\"let the soul catch up\"). Wait for the silence to propagate. Stand firmly and controlled. Empty your hands. Smile because you were looking forward to this or to what happens afterwards. Glance at the audience, look for kind faces. Talking Change speed/volume of your voice to increase tension. Add breaks to let the audience relax. Look at members of the audience directly and personally. Live through the emotions of the talk to provoke mimics. Allow the hands to naturally flow with your speech. Be honest, be yourself so your body moves naturally. Check for non-verbal feedback of the audience as they mirror your emotions. Difficult situations Never start a fight with the audience. Only react if target of speech is in danger. Lose the trail of thought Skip a part, you can retry later if it is still needed. Announce it for later (\"Let me first explain ...\"). Repeat the last thought (\"lets summarize...\"). Keep the participants occupied (note, ask for questions). Use empty phrases (\"it is difficult to find the correct way to say ...\"). Noise Smile friendly and wait till everything is quiet again. Do not educate; simply let the silence propagate. Attacks Be intelligible; not everyone will like you. Lay on ice (note down publicly, ask to repeat question later). Transform into question (\"this is an important question; you ask whether this is true...\"). Minus/plus (\"yes this will be difficult, but let's look at the advantages...\"). Ask for clarification (\"what exactly is not working\"). Reference (\"you hear this opinion often, but if you look at ...\"). Out of topic (\"this would take too much time to discuss\"). Ask for help (\"what do you expect me to do now?\"). Defend (ask personally to stop/leave, get support from the audience). Talk with script To avoid being too passive, use the following loop: read and understand text concentrated look at the audience and form a connection present text including mimic, voice changes, breaks, ...) keep eye connection for the rhetorical break lower the head for the next phrase Spontaneous Talks Use the universal form of yesterday, today, tomorrow. Use the five phrase technics (primarily problem-solving / position forms).","title":"Rhetoric"},{"location":"communicate/courses/speech/#rhetoric","text":"How to communicate ideas effectively.","title":"Rhetoric"},{"location":"communicate/courses/speech/#prepared-speech","text":"A good talk has a good start and a good end, and they are as close together as possible. Ensure you identify with the subject, and can wholeheartedly defend it.","title":"Prepared Speech"},{"location":"communicate/courses/speech/#adapt-to-the-audience","text":"Choose the right degree of detail (granularity, amount) under the circumstances. Find out their needs/pains and focus on the benefits (less work, more possibilities). Prepare for anticipated questions.","title":"Adapt to the audience"},{"location":"communicate/courses/speech/#general-points","text":"Structure the talk well (leitmotif, decomposed; add breaks after important points). Make it as short as possible to reach your target. Add stimuli such as rhetorical questions, examples including your audience, direct speech, visual elements, tension and humour. Make it easy understandable (easy words, structured content, short, additional stimuli). Avoid challenging members on a personal level (through weak claims / avoiding answers).","title":"General points"},{"location":"communicate/courses/speech/#concept","text":"Formulate a target for your speech as a single phrase; aligning your interests with the audience. Research the subject quantitatively and broad. Review research and remove material that does is not strictly needed to reach the target. Develop the argumentation while focusing on the meaning for the audience. Create the end of the talk which contains hands-on advice. Create the start of the talk.","title":"Concept"},{"location":"communicate/courses/speech/#manuscript","text":"Formulate start/end completely and learn by heart. Note down keywords for the rest on flashcards / sheet of paper. Mark rhetorical/dramaturgical effects.","title":"Manuscript"},{"location":"communicate/courses/speech/#patterns","text":"Use the you-form (\u201cyou can simply press here and then...\u201d). After explaining facts, go back to you form with rhetorical questions (\"what does this mean for you\", \"why do I explain this to you\"). Use analogies/images/questions to make the audience think. Use simple phrases. Place breaks after questions and important points. Make audience agree upon generally known facts (so they will accept new facts).","title":"Patterns"},{"location":"communicate/courses/speech/#argumentation","text":"","title":"Argumentation"},{"location":"communicate/courses/speech/#forms","text":"rational (use statistics, facts, logical reasoning) emotional (use concrete example, fear, feelings) tactical (assure to be object, but judge other arguments as incomparable) moral (use norms of the society, cite important personas, appeal to decency) plausibility (plead to tradition, exaggerate, appeal to \"common sense\")","title":"forms"},{"location":"communicate/courses/speech/#five-phrases","text":"essay (introduction, arguments, conclusion) position (declare position, argument for it, example, conclusion from example, plea to act) problem-solving (present the now, describe causes, present the should-be, describe acts, plea to act) special case (describe rule, describe exception, describe why exception part of the rule, describe why not, plea to act) comparison (present A, argue for A, present B, argue for B, combine or discard both) dialectic (fact, present A, present B, combine, conclude) new-aspect (introduction, summary of active outcome, introduce new aspect, evaluate new aspect conclude) questions (why am I speaking, what is going on, what should be, how can this be archived, what do we need to do mismatch (present A, present B, combine/discard both, present own solution, consequences) divergence (present A, reveal mistakes, present solution for this mistakes, present concept, plea to act)","title":"five-phrases"},{"location":"communicate/courses/speech/#other-techniques","text":"feature (what), advantage (why this is great) use (how can you benefit) yesterday, today, tomorrow","title":"other techniques"},{"location":"communicate/courses/speech/#start","text":"Start strong (no apologies/complaints/overview/empty phrases). Focus the attention of the audience (news, joke, rhetorical question, citation, story, special item). Be convinced of whatever you do.","title":"Start"},{"location":"communicate/courses/speech/#end","text":"End strong (no apologies/thanks/announcement/invisible/conjuntictive). Use a short summary, give an outlook (yesterday/today/tomorrow, utilization, plea), ask a rhetorical question, connect with the start.","title":"End"},{"location":"communicate/courses/speech/#train","text":"Train including breaks & emphasis. Use simple language and short phrases. Record and replay.","title":"Train"},{"location":"communicate/courses/speech/#talk","text":"How to behave before, after & during the talk.","title":"Talk"},{"location":"communicate/courses/speech/#venue","text":"Try out technical devices needed for the talk. Order needed material and lay it out. Ensure no attention seeking objects in you vicinity. Choose appropriate clothing.","title":"Venue"},{"location":"communicate/courses/speech/#directly-before-the-talk","text":"Stick to your plan. Ensure you still know the first few phrases. Sit down, empty your head and breath calmly. Look forward to the talk or what comes after.","title":"Directly before the talk"},{"location":"communicate/courses/speech/#mindset","text":"It is natural to be nervous; just another challenge waiting to be beat. The talk happens even if you are not optimally prepared; you can not change the past. You are allowed to make mistakes, it does not have to be perfect. You know about the subject best. Play out your strengths and be aware of your weaknesses. Be courteous, kind, motivated.","title":"Mindset"},{"location":"communicate/courses/speech/#ascent","text":"Walk slowly and certain, use the walk to dissipate excess energy from the stage fright. Upon arrival, wait a bit (\"let the soul catch up\"). Wait for the silence to propagate. Stand firmly and controlled. Empty your hands. Smile because you were looking forward to this or to what happens afterwards. Glance at the audience, look for kind faces.","title":"Ascent"},{"location":"communicate/courses/speech/#talking","text":"Change speed/volume of your voice to increase tension. Add breaks to let the audience relax. Look at members of the audience directly and personally. Live through the emotions of the talk to provoke mimics. Allow the hands to naturally flow with your speech. Be honest, be yourself so your body moves naturally. Check for non-verbal feedback of the audience as they mirror your emotions.","title":"Talking"},{"location":"communicate/courses/speech/#difficult-situations","text":"Never start a fight with the audience. Only react if target of speech is in danger.","title":"Difficult situations"},{"location":"communicate/courses/speech/#lose-the-trail-of-thought","text":"Skip a part, you can retry later if it is still needed. Announce it for later (\"Let me first explain ...\"). Repeat the last thought (\"lets summarize...\"). Keep the participants occupied (note, ask for questions). Use empty phrases (\"it is difficult to find the correct way to say ...\").","title":"Lose the trail of thought"},{"location":"communicate/courses/speech/#noise","text":"Smile friendly and wait till everything is quiet again. Do not educate; simply let the silence propagate.","title":"Noise"},{"location":"communicate/courses/speech/#attacks","text":"Be intelligible; not everyone will like you. Lay on ice (note down publicly, ask to repeat question later). Transform into question (\"this is an important question; you ask whether this is true...\"). Minus/plus (\"yes this will be difficult, but let's look at the advantages...\"). Ask for clarification (\"what exactly is not working\"). Reference (\"you hear this opinion often, but if you look at ...\"). Out of topic (\"this would take too much time to discuss\"). Ask for help (\"what do you expect me to do now?\"). Defend (ask personally to stop/leave, get support from the audience).","title":"Attacks"},{"location":"communicate/courses/speech/#talk-with-script","text":"To avoid being too passive, use the following loop: read and understand text concentrated look at the audience and form a connection present text including mimic, voice changes, breaks, ...) keep eye connection for the rhetorical break lower the head for the next phrase","title":"Talk with script"},{"location":"communicate/courses/speech/#spontaneous-talks","text":"Use the universal form of yesterday, today, tomorrow. Use the five phrase technics (primarily problem-solving / position forms).","title":"Spontaneous Talks"},{"location":"communicate/web/liberation%20structures/","text":"Meetings TRIZ to speak out the unspeakable. let the team members do the following; note down what to do to archive the worst result imaginable go through list and pick activities currently going on which resemble any of the entries go through the identified activities and note down deployable countermeasures guidelines: make an example \"how to build IT system no one wants to use\"; solutions should be about stopping something use 1-2-4-All for each step; help confused/laughing groups begin with very unwanted result note down activities to stop and number them include people involved with stopping something by asking who else needs to be included meetings to work out ideas Walt-Disney method to explore ideas. judge from different perspectives: the Dreamer as a visionary who produces ideas the Realist as a maker who tries to implement the ideas the Critic as a quality manager which asks critical questions the Neutral as a neutral which enables the discussion 6 Thinking Hats to explore ideas. judge from directions: Manager (blue) which has the big picture, defines the subject and goals and which hat is chosen netx Informer (white) collects information and provides facts Emotional (red) produces emotional gut feelings without justifications Discernment (black) analyses practically and realistically Optimistic response (yellow) looks for logically based benefits Creativity (green) provokes and thinks outside the box Using these hats, one can construct programs: A sequence of time-boxed discussions where a specific hat is chosen for each interval. This helps the group focus on aspects of the problem and avoids chaotic discussions. allow to: fully collect pro/con arguments (black/yellow) before discussion (black) collect insight even from people not fond of an idea \"turn off\" negativity (black) for a while to boost creativity (green) include members usually wearing one type of hat to think as other hats One may choose a sequence best suited for the problem under discussion: For example, in the conceptual phase of a project one, may choose the following sequence: Blue (to define what has to be answered), White (to share knowledge of team members), Green (to collect ideas) and then Blue (to elect an idea to focus on next). Lean coffee for unstructured meetings. Coordinator collects topics Topics are assigned a priority Topics are discussed in a timebox according to priority Results are noted down. Kompleximeeting to prepare a decision for a concrete problem. Send out an invitation which clearly specifies the problem to be discussed (but no solutions/wishes). Interested parties accept the invitation (participation is not mandatory), and prepare. The meeting is for discussion only, decisions will be prepared (decision criteria, decision enabler), but not taken. Favour discussions over presentations. Additional Tools Liberating Structures which provides meeting templates to allow people to share ideas and talk openly about else not openly talked stuff. Atlassian Team Playbook which contains tools for team meetings.","title":"Liberation structures"},{"location":"communicate/web/liberation%20structures/#meetings","text":"","title":"Meetings"},{"location":"communicate/web/liberation%20structures/#triz","text":"to speak out the unspeakable. let the team members do the following; note down what to do to archive the worst result imaginable go through list and pick activities currently going on which resemble any of the entries go through the identified activities and note down deployable countermeasures guidelines: make an example \"how to build IT system no one wants to use\"; solutions should be about stopping something use 1-2-4-All for each step; help confused/laughing groups begin with very unwanted result note down activities to stop and number them include people involved with stopping something by asking who else needs to be included meetings to work out ideas","title":"TRIZ"},{"location":"communicate/web/liberation%20structures/#walt-disney-method","text":"to explore ideas. judge from different perspectives: the Dreamer as a visionary who produces ideas the Realist as a maker who tries to implement the ideas the Critic as a quality manager which asks critical questions the Neutral as a neutral which enables the discussion","title":"Walt-Disney method"},{"location":"communicate/web/liberation%20structures/#6-thinking-hats","text":"to explore ideas. judge from directions: Manager (blue) which has the big picture, defines the subject and goals and which hat is chosen netx Informer (white) collects information and provides facts Emotional (red) produces emotional gut feelings without justifications Discernment (black) analyses practically and realistically Optimistic response (yellow) looks for logically based benefits Creativity (green) provokes and thinks outside the box Using these hats, one can construct programs: A sequence of time-boxed discussions where a specific hat is chosen for each interval. This helps the group focus on aspects of the problem and avoids chaotic discussions. allow to: fully collect pro/con arguments (black/yellow) before discussion (black) collect insight even from people not fond of an idea \"turn off\" negativity (black) for a while to boost creativity (green) include members usually wearing one type of hat to think as other hats One may choose a sequence best suited for the problem under discussion: For example, in the conceptual phase of a project one, may choose the following sequence: Blue (to define what has to be answered), White (to share knowledge of team members), Green (to collect ideas) and then Blue (to elect an idea to focus on next).","title":"6 Thinking Hats"},{"location":"communicate/web/liberation%20structures/#lean-coffee","text":"for unstructured meetings. Coordinator collects topics Topics are assigned a priority Topics are discussed in a timebox according to priority Results are noted down.","title":"Lean coffee"},{"location":"communicate/web/liberation%20structures/#kompleximeeting","text":"to prepare a decision for a concrete problem. Send out an invitation which clearly specifies the problem to be discussed (but no solutions/wishes). Interested parties accept the invitation (participation is not mandatory), and prepare. The meeting is for discussion only, decisions will be prepared (decision criteria, decision enabler), but not taken. Favour discussions over presentations.","title":"Kompleximeeting"},{"location":"communicate/web/liberation%20structures/#additional-tools","text":"Liberating Structures which provides meeting templates to allow people to share ideas and talk openly about else not openly talked stuff. Atlassian Team Playbook which contains tools for team meetings.","title":"Additional Tools"},{"location":"cooking/backen/","text":"brot angaben in einheit 100g bei pl\u00f6tz 1.5mal so viel salz verwenden. weissbr\u00f6tchen: 1h vorteig 4 weiss, 0.5 dunkel, 2 wasser, 1 milch 4x wendeteig 2g salz, 0.5g trockenhefe 12h k\u00fchlzeit 250\u00b0 / 20min ciabatta: 10h vorteig 1 weiss, 0.5 dunkel, 1 wasser, 0.3g hefe 30min quellteig 2 weiss, 1.3 wasser 4x wendeteig 2g salz, 0.3g hefe, 5ml oliven\u00f6l, 10ml wasser formen & 12h k\u00fchlzeit 250\u00b0 / 25min baguette: 4x wendeteig, 13g salz, 13g zucker, 4 wasser, 5 weiss, 1 dunkel, 2g hefe 48h k\u00fchlzeit formen, 1h wenden, 1h wenden 250\u00b0 / 20min","title":"brot"},{"location":"cooking/backen/#brot","text":"angaben in einheit 100g bei pl\u00f6tz 1.5mal so viel salz verwenden. weissbr\u00f6tchen: 1h vorteig 4 weiss, 0.5 dunkel, 2 wasser, 1 milch 4x wendeteig 2g salz, 0.5g trockenhefe 12h k\u00fchlzeit 250\u00b0 / 20min ciabatta: 10h vorteig 1 weiss, 0.5 dunkel, 1 wasser, 0.3g hefe 30min quellteig 2 weiss, 1.3 wasser 4x wendeteig 2g salz, 0.3g hefe, 5ml oliven\u00f6l, 10ml wasser formen & 12h k\u00fchlzeit 250\u00b0 / 25min baguette: 4x wendeteig, 13g salz, 13g zucker, 4 wasser, 5 weiss, 1 dunkel, 2g hefe 48h k\u00fchlzeit formen, 1h wenden, 1h wenden 250\u00b0 / 20min","title":"brot"},{"location":"cooking/grundrezepte/","text":"Cooking europa one-pot (pasta) grundrezept: 400g pasta = 1l wasser deckel zu bis fast al dente unter hoher hitze rest des wassers auskochen trivial: mascarpone gorgonzola alio e olio pesto tomatig: pelati (wenig fl\u00fcssigkeit), \u00f6l, ital. gew\u00fcrz, wein (kalt) w\u00fcrfeltomaten, wenig zwiebel, knoblauch, basilicum, k\u00fchlschrank stehen lassen pelati, trockene tomaten, kapern auberginen, zuccetti getrocknete tomaten, oliven, mozarellaperlen gem\u00fcsig: spargeln & r\u00fcebli randen & feta & thymian rahmig: ca. 2dl rahm statt 1dl wasser; mit mehl eindicken; mit rotwein / weisswein abschmecken creme fresh, peterli, schnittlauch pilze, spinat, lauch n\u00fcsse, scharf risotto grundrezept: zwiebeln, \u00f6l reis bis heiss abl\u00f6schen mit wein nach und nach buillon zugeben (hohe hitze, immer wieder einkochen, r\u00fchren) cremig mit k\u00e4se, butter, mascarpone wenn noch leicht bissig varianten: pesto, tomatenpaste & cherrytomaten pilz artischoken & dill spargeln w\u00e4he kuchenteig, zwiebeln 2 eier = 1 dl milch geschmack: pilze, lauch 200g r\u00fcebli, gruyere k\u00e4semischung rhabarber & mandeln mais + pakchoi auflauf grundrezepte: pasta, 1 ei = 1 dl rahm, k\u00e4se sp\u00e4tzli, 2 eier = 2.5 dl rahm combos: pilze, zwiebeln finish: gr\u00fcyere 50% mischen, 50% \u00fcberbacken raclette \u00fcberbacken burger grundzutaten: salat (crunch) tomaten (saft) brot (form) varianten: schafsk\u00e4se, randen beyond meat, migros fakes pre-processed gnocci: pesto zwiebeln, oliven, trokene tomaten, chili, wenig mit frischen tomaten anbraten sp\u00e4tzli / kn\u00f6pfli: raclettek\u00e4se r\u00fcbeli, zwiebeln, gr\u00fcyere, rahm, petersilie Asia geschm\u00e4ker: soja ingwer (in \u00f6l anbraten) sesam (in \u00f6l anbraten) erdnuss stir & fried (jasmin)reis: - 250g reis = 350g wasser - salzen, 10min kochen, 15min stehen lassen grundrezept: pro runde dominierender geschmack ausw\u00e4hlen ei-runde (ei, milch stocken lassen, danach herausnehmen & warm behalten) gem\u00fcse runde (gem\u00fcse sehr heiss anbraten) finalisieren (ei dazugeben, kurz aufkochen) gem\u00fcse: paprika aubergine zuccetti tofu fried rice grundrezept: gem\u00fcse in geschmack anbraten alter reis dazugeben, reisessig ei dazugeben gem\u00fcse: zwiebeln brokkoli chinakohl pilze paprika aubergine ramen grundrezept: gem\u00fcse in \u00f6l anbraten wasser dazugeben rahmen bis zerf\u00e4llt ganzes ei dazugeben, ca 3min fertig kochen gem\u00fcse: zwiebeln pilze lauch pak-choi r\u00fcebli blattspinat bambussprossen brokkoli deko: sprossen 6min ei 3h in soja einlegen w\u00fcrzen: ei stark ver\u00fchren reisessig ahornsirup misosuppe algen scharf poke bowl: grundrezept: jasminreis als grundlage frisch (gurken, sojabohnen, sojabohnen) s\u00fcss (mango, avocado, ananas) beilage (tofu mit geschmack, fleischersatz) gew\u00fcrz (sesam, chili, schnittlauch, erdnusspaste, eingelegte ingwer, sojasauce) india curry jasminreis base (ingwer, zwiebeln, knoblauch) spices (currypaste, tomatenmark, koriander, k\u00fcmmel, kurkuma, garam masala, zitronengras) kokosmilch haupt (tofu, paneer) gem\u00fcse (kartoffeln, wirsig, blumenkohl, aubergine, zuccini, spinat) s\u00fcss (honig, fr\u00fcchte, ananas, trauben, mango) dal grundrezept: zwiebeln, knoblauch, ingwer anbraten kochen 100g linsen pro person; 1.5 wasser, 1.3 kokosmilch (sp\u00e4ter dazugeben) gem\u00fcse je nach gardauen (optional) yogourt zusammen mit fladenbrot servieren gew\u00fcrze: viel garam masala / kurkuma koriander tomatenmark (wenig) kreuzk\u00fcmmel zitrone petersilie cashew chili gem\u00fcse: s\u00fcsskartoffen & blattspinat","title":"Cooking"},{"location":"cooking/grundrezepte/#cooking","text":"","title":"Cooking"},{"location":"cooking/grundrezepte/#europa","text":"","title":"europa"},{"location":"cooking/grundrezepte/#one-pot-pasta","text":"grundrezept: 400g pasta = 1l wasser deckel zu bis fast al dente unter hoher hitze rest des wassers auskochen trivial: mascarpone gorgonzola alio e olio pesto tomatig: pelati (wenig fl\u00fcssigkeit), \u00f6l, ital. gew\u00fcrz, wein (kalt) w\u00fcrfeltomaten, wenig zwiebel, knoblauch, basilicum, k\u00fchlschrank stehen lassen pelati, trockene tomaten, kapern auberginen, zuccetti getrocknete tomaten, oliven, mozarellaperlen gem\u00fcsig: spargeln & r\u00fcebli randen & feta & thymian rahmig: ca. 2dl rahm statt 1dl wasser; mit mehl eindicken; mit rotwein / weisswein abschmecken creme fresh, peterli, schnittlauch pilze, spinat, lauch n\u00fcsse, scharf","title":"one-pot (pasta)"},{"location":"cooking/grundrezepte/#risotto","text":"grundrezept: zwiebeln, \u00f6l reis bis heiss abl\u00f6schen mit wein nach und nach buillon zugeben (hohe hitze, immer wieder einkochen, r\u00fchren) cremig mit k\u00e4se, butter, mascarpone wenn noch leicht bissig varianten: pesto, tomatenpaste & cherrytomaten pilz artischoken & dill spargeln","title":"risotto"},{"location":"cooking/grundrezepte/#wahe","text":"kuchenteig, zwiebeln 2 eier = 1 dl milch geschmack: pilze, lauch 200g r\u00fcebli, gruyere k\u00e4semischung rhabarber & mandeln mais + pakchoi","title":"w\u00e4he"},{"location":"cooking/grundrezepte/#auflauf","text":"grundrezepte: pasta, 1 ei = 1 dl rahm, k\u00e4se sp\u00e4tzli, 2 eier = 2.5 dl rahm combos: pilze, zwiebeln finish: gr\u00fcyere 50% mischen, 50% \u00fcberbacken raclette \u00fcberbacken","title":"auflauf"},{"location":"cooking/grundrezepte/#burger","text":"grundzutaten: salat (crunch) tomaten (saft) brot (form) varianten: schafsk\u00e4se, randen beyond meat, migros fakes","title":"burger"},{"location":"cooking/grundrezepte/#pre-processed","text":"gnocci: pesto zwiebeln, oliven, trokene tomaten, chili, wenig mit frischen tomaten anbraten sp\u00e4tzli / kn\u00f6pfli: raclettek\u00e4se r\u00fcbeli, zwiebeln, gr\u00fcyere, rahm, petersilie","title":"pre-processed"},{"location":"cooking/grundrezepte/#asia","text":"geschm\u00e4ker: soja ingwer (in \u00f6l anbraten) sesam (in \u00f6l anbraten) erdnuss","title":"Asia"},{"location":"cooking/grundrezepte/#stir-fried","text":"(jasmin)reis: - 250g reis = 350g wasser - salzen, 10min kochen, 15min stehen lassen grundrezept: pro runde dominierender geschmack ausw\u00e4hlen ei-runde (ei, milch stocken lassen, danach herausnehmen & warm behalten) gem\u00fcse runde (gem\u00fcse sehr heiss anbraten) finalisieren (ei dazugeben, kurz aufkochen) gem\u00fcse: paprika aubergine zuccetti tofu","title":"stir &amp; fried"},{"location":"cooking/grundrezepte/#fried-rice","text":"grundrezept: gem\u00fcse in geschmack anbraten alter reis dazugeben, reisessig ei dazugeben gem\u00fcse: zwiebeln brokkoli chinakohl pilze paprika aubergine","title":"fried rice"},{"location":"cooking/grundrezepte/#ramen","text":"grundrezept: gem\u00fcse in \u00f6l anbraten wasser dazugeben rahmen bis zerf\u00e4llt ganzes ei dazugeben, ca 3min fertig kochen gem\u00fcse: zwiebeln pilze lauch pak-choi r\u00fcebli blattspinat bambussprossen brokkoli deko: sprossen 6min ei 3h in soja einlegen w\u00fcrzen: ei stark ver\u00fchren reisessig ahornsirup misosuppe algen scharf","title":"ramen"},{"location":"cooking/grundrezepte/#poke-bowl","text":"grundrezept: jasminreis als grundlage frisch (gurken, sojabohnen, sojabohnen) s\u00fcss (mango, avocado, ananas) beilage (tofu mit geschmack, fleischersatz) gew\u00fcrz (sesam, chili, schnittlauch, erdnusspaste, eingelegte ingwer, sojasauce)","title":"poke bowl:"},{"location":"cooking/grundrezepte/#india","text":"","title":"india"},{"location":"cooking/grundrezepte/#curry","text":"jasminreis base (ingwer, zwiebeln, knoblauch) spices (currypaste, tomatenmark, koriander, k\u00fcmmel, kurkuma, garam masala, zitronengras) kokosmilch haupt (tofu, paneer) gem\u00fcse (kartoffeln, wirsig, blumenkohl, aubergine, zuccini, spinat) s\u00fcss (honig, fr\u00fcchte, ananas, trauben, mango)","title":"curry"},{"location":"cooking/grundrezepte/#dal","text":"grundrezept: zwiebeln, knoblauch, ingwer anbraten kochen 100g linsen pro person; 1.5 wasser, 1.3 kokosmilch (sp\u00e4ter dazugeben) gem\u00fcse je nach gardauen (optional) yogourt zusammen mit fladenbrot servieren gew\u00fcrze: viel garam masala / kurkuma koriander tomatenmark (wenig) kreuzk\u00fcmmel zitrone petersilie cashew chili gem\u00fcse: s\u00fcsskartoffen & blattspinat","title":"dal"},{"location":"cooking/links/","text":"Links getr\u00e4nke https://imkerei.ch f\u00fcr met https://www.delinat.com/ f\u00fcr normale weine https://gilliard.ch/de/vins/porte-de-novembre-de/ f\u00fcr s\u00fcsse weine neue ideen Pizokel Griess-Gnocci","title":"Links"},{"location":"cooking/links/#links","text":"","title":"Links"},{"location":"cooking/links/#getranke","text":"https://imkerei.ch f\u00fcr met https://www.delinat.com/ f\u00fcr normale weine https://gilliard.ch/de/vins/porte-de-novembre-de/ f\u00fcr s\u00fcsse weine","title":"getr\u00e4nke"},{"location":"cooking/links/#neue-ideen","text":"Pizokel Griess-Gnocci","title":"neue ideen"},{"location":"cooking/rezepte/","text":"Rezepte zutaten eier: r\u00fchrei verlorene eier k\u00f6rnli: bulgur / ebly mais couscous quinoa Long pilzsauce: 2/3 grobe pilze r\u00f6sen in pfanne butter zwiebeln knoblauch dazugeben 1/3 feine pilze dazu, weisswein, rahm salz, pfeffer (optional peterli, buillion) frittata: paprica / zuccini / auergine d\u00fcnsten feta, eier + salz/pfeffer mischen wenden, anbraten k\u00e4seschnitte/toast hawaii: starker k\u00e4se (raclette) oder leichter k\u00e4se + ananas tomate & halbdunkles brot carbonara: 50/50 pecorino parmesan, salzwasser 1 ganzem ei, 1 eigelb dazugeben mit warmer pasta vermengen shashuka: zwiebel, knoblauch, pelati, peperoni, (aubergine, zuccetti) zimt, koriander, petersilie, garam masala zerbr\u00f6selter feta, halloumi mit ei \u00fcberbacken 200\u00b0 10min dazu brot, knoblauchbrot kartoffelgratin: festkochend, raclette (0.4*kartoffelgewicht), wenig buillon, paprika mehligkochend, rahm = milch (0.4*kartoffelgewicht), muskatnuss, k\u00e4se deko: ofenei im bl\u00e4tterteig mit pilz, petersilie & etwas k\u00e4se pizza: - pelati/\u00f6l/kr\u00e4uter f\u00fcr sauce - mehl/weizenkleie/salz/backpulver f\u00fcr teig - kleine mozarellas/tomme, rucola als deco - 4 formaggi (ziegenk\u00e4se, gorgonzola, mascarpone) - gem\u00fcse (pilz/zuccetti/peperoni and\u00fcnsten, oliven) - spinat/feta o. ziegenk\u00e4se - creme fresh (mit safran) und getrocknete tomaten, steinpilze, zwiebeln - feigen / honig - vuna Suppe mehlsuppe: mehl unter stetigen r\u00fchren braun braten (100g) mit fl\u00fcssiger butter abl\u00f6schen (50g) buillon (1l) + rotwein mit gruyere und rahm servieren maissuppe: 300g potatoes, 1 celery, 150g mais, chili, onion; cook 1 carrot, cook & mix add 150ml cream, butter, 50g mais Dessert mascapone / sirup: mascarpone, 1/4 yogourt, zitronensaft sirup, schokopulver fr\u00fcchte / sirup / schokostreusel zur dekoration Exklusiv schwarzer reis: schwarzer reis (250g) in gesalzener kokosmilch kochen (500ml) + ca 1/5 aussp\u00fclwasser ; ca. 2h","title":"Rezepte"},{"location":"cooking/rezepte/#rezepte","text":"","title":"Rezepte"},{"location":"cooking/rezepte/#zutaten","text":"eier: r\u00fchrei verlorene eier k\u00f6rnli: bulgur / ebly mais couscous quinoa","title":"zutaten"},{"location":"cooking/rezepte/#long","text":"pilzsauce: 2/3 grobe pilze r\u00f6sen in pfanne butter zwiebeln knoblauch dazugeben 1/3 feine pilze dazu, weisswein, rahm salz, pfeffer (optional peterli, buillion) frittata: paprica / zuccini / auergine d\u00fcnsten feta, eier + salz/pfeffer mischen wenden, anbraten k\u00e4seschnitte/toast hawaii: starker k\u00e4se (raclette) oder leichter k\u00e4se + ananas tomate & halbdunkles brot carbonara: 50/50 pecorino parmesan, salzwasser 1 ganzem ei, 1 eigelb dazugeben mit warmer pasta vermengen shashuka: zwiebel, knoblauch, pelati, peperoni, (aubergine, zuccetti) zimt, koriander, petersilie, garam masala zerbr\u00f6selter feta, halloumi mit ei \u00fcberbacken 200\u00b0 10min dazu brot, knoblauchbrot kartoffelgratin: festkochend, raclette (0.4*kartoffelgewicht), wenig buillon, paprika mehligkochend, rahm = milch (0.4*kartoffelgewicht), muskatnuss, k\u00e4se deko: ofenei im bl\u00e4tterteig mit pilz, petersilie & etwas k\u00e4se pizza: - pelati/\u00f6l/kr\u00e4uter f\u00fcr sauce - mehl/weizenkleie/salz/backpulver f\u00fcr teig - kleine mozarellas/tomme, rucola als deco - 4 formaggi (ziegenk\u00e4se, gorgonzola, mascarpone) - gem\u00fcse (pilz/zuccetti/peperoni and\u00fcnsten, oliven) - spinat/feta o. ziegenk\u00e4se - creme fresh (mit safran) und getrocknete tomaten, steinpilze, zwiebeln - feigen / honig - vuna","title":"Long"},{"location":"cooking/rezepte/#suppe","text":"mehlsuppe: mehl unter stetigen r\u00fchren braun braten (100g) mit fl\u00fcssiger butter abl\u00f6schen (50g) buillon (1l) + rotwein mit gruyere und rahm servieren maissuppe: 300g potatoes, 1 celery, 150g mais, chili, onion; cook 1 carrot, cook & mix add 150ml cream, butter, 50g mais","title":"Suppe"},{"location":"cooking/rezepte/#dessert","text":"mascapone / sirup: mascarpone, 1/4 yogourt, zitronensaft sirup, schokopulver fr\u00fcchte / sirup / schokostreusel zur dekoration","title":"Dessert"},{"location":"cooking/rezepte/#exklusiv","text":"schwarzer reis: schwarzer reis (250g) in gesalzener kokosmilch kochen (500ml) + ca 1/5 aussp\u00fclwasser ; ca. 2h","title":"Exklusiv"},{"location":"develop/architecture/","text":"Architecture the architecture should serve its users, and hence must be adapted first to the skills and needs of the programmers actually working with it. for small projects: abstract messy details of subproblems (UI, export, ...) prefer passing state around (rather than some form of global state) prefer injecting functionality (rather than passing it around) cling to existing guidelines (given by framework) & naming (like schema.org) avoid dependencies for trivial functionalities (rather copy them into project)","title":"Architecture"},{"location":"develop/architecture/#architecture","text":"the architecture should serve its users, and hence must be adapted first to the skills and needs of the programmers actually working with it. for small projects: abstract messy details of subproblems (UI, export, ...) prefer passing state around (rather than some form of global state) prefer injecting functionality (rather than passing it around) cling to existing guidelines (given by framework) & naming (like schema.org) avoid dependencies for trivial functionalities (rather copy them into project)","title":"Architecture"},{"location":"develop/design/","text":"Design Colors permute hex values to create a nice-looking scheme: hard main theme colors by permuting cc , ff , 66 , 99 (like 99cc66 ) pastel main theme colors by permuting a , b , c , d , e , g (like acebcb ) text colors with a blue taint with 1a2a3a and then increasing the numbers to get lighter background colors with repeating a , b , c , d , e , g (like bbbbbb ) generators: http://paletton.com/ for pastel colors https://color.adobe.com/create https://mycolor.space/ https://coolors.co/app pre-made: https://colorhunt.co/ for premade color palettes https://www.webdesignrankings.com/resources/lolcolors/ for premade color palettes https://webgradients.com/ for premade gradients Fonts fonts: https://www.typewolf.com/ for typography inspirations https://typeanything.io/ to try out font combinations https://fontpair.co/ to pair fonts https://fonts.google.com/ for free fonts https://www.fonts.com/ for paid fonts https://www.myfonts.com/ for paid fonts Content videos: https://coverr.co/ for free videos photos: https://www.pexels.com/ for free photos https://pixabay.com/ for free photos https://unsplash.com/ for free photos http://thestocks.im/ for a free stock media aggregator illustrations: https://www.flaticon.com/ for fremium icon pacs https://undraw.co/ for free illustrations patterns: https://www.toptal.com/designers/subtlepatterns/ for patterns generate: https://www.draw.io/ to draw diagrams Layout mockups: https://balsamiq.com/ for mockups https://www.flinto.com/ for interactive prototypes https://www.fluidui.com/ for collaborative UI design https://www.invisionapp.com/ for collaborative pixel perfect screen designs https://www.justinmind.com/ for pixel perfect user flows UI designs: https://dribbble.com/ for UI designs https://uimovement.com/ for over the top UI designs https://www.behance.net/ for designs https://www.awwwards.com/ for daily awarded web design http://beautifulopen.com/ https://www.refactoringui.com/ https://rauno.me/craft for tricks creating awesome designs templates: https://carrd.co/ for landing pages https://html5up.net for landing pages https://inovatik.com/ for landing pages http://blacktie.co/ https://www.styleshout.com/ https://templated.co/ https://www.creative-tim.com/ (inkl. vueJS) frameworks: http://getbootstrap.com/ http://carbondesignsystem.com/ http://foundation.zurb.com/ http://semantic-ui.com/","title":"Design"},{"location":"develop/design/#design","text":"","title":"Design"},{"location":"develop/design/#colors","text":"permute hex values to create a nice-looking scheme: hard main theme colors by permuting cc , ff , 66 , 99 (like 99cc66 ) pastel main theme colors by permuting a , b , c , d , e , g (like acebcb ) text colors with a blue taint with 1a2a3a and then increasing the numbers to get lighter background colors with repeating a , b , c , d , e , g (like bbbbbb ) generators: http://paletton.com/ for pastel colors https://color.adobe.com/create https://mycolor.space/ https://coolors.co/app pre-made: https://colorhunt.co/ for premade color palettes https://www.webdesignrankings.com/resources/lolcolors/ for premade color palettes https://webgradients.com/ for premade gradients","title":"Colors"},{"location":"develop/design/#fonts","text":"fonts: https://www.typewolf.com/ for typography inspirations https://typeanything.io/ to try out font combinations https://fontpair.co/ to pair fonts https://fonts.google.com/ for free fonts https://www.fonts.com/ for paid fonts https://www.myfonts.com/ for paid fonts","title":"Fonts"},{"location":"develop/design/#content","text":"videos: https://coverr.co/ for free videos photos: https://www.pexels.com/ for free photos https://pixabay.com/ for free photos https://unsplash.com/ for free photos http://thestocks.im/ for a free stock media aggregator illustrations: https://www.flaticon.com/ for fremium icon pacs https://undraw.co/ for free illustrations patterns: https://www.toptal.com/designers/subtlepatterns/ for patterns generate: https://www.draw.io/ to draw diagrams","title":"Content"},{"location":"develop/design/#layout","text":"mockups: https://balsamiq.com/ for mockups https://www.flinto.com/ for interactive prototypes https://www.fluidui.com/ for collaborative UI design https://www.invisionapp.com/ for collaborative pixel perfect screen designs https://www.justinmind.com/ for pixel perfect user flows UI designs: https://dribbble.com/ for UI designs https://uimovement.com/ for over the top UI designs https://www.behance.net/ for designs https://www.awwwards.com/ for daily awarded web design http://beautifulopen.com/ https://www.refactoringui.com/ https://rauno.me/craft for tricks creating awesome designs templates: https://carrd.co/ for landing pages https://html5up.net for landing pages https://inovatik.com/ for landing pages http://blacktie.co/ https://www.styleshout.com/ https://templated.co/ https://www.creative-tim.com/ (inkl. vueJS) frameworks: http://getbootstrap.com/ http://carbondesignsystem.com/ http://foundation.zurb.com/ http://semantic-ui.com/","title":"Layout"},{"location":"develop/docs/","text":"documentation document at various granularities, including the justifications behind design decisions. document how business rules or non-functional requirements (like performance) impacted the argument and why. for big applications & home-made architectures, you may want to document additional parts as described by Code Complete (Steve Connel), p45. explicitly separate project-specific and general expert knowledge write in the form of Tutorials, How-To Guides, Explanations or References.","title":"documentation"},{"location":"develop/docs/#documentation","text":"document at various granularities, including the justifications behind design decisions. document how business rules or non-functional requirements (like performance) impacted the argument and why. for big applications & home-made architectures, you may want to document additional parts as described by Code Complete (Steve Connel), p45. explicitly separate project-specific and general expert knowledge write in the form of Tutorials, How-To Guides, Explanations or References.","title":"documentation"},{"location":"develop/links/","text":"Links awesome people: https://twitter.com/ajlkn is a skillful designer https://github.com/spatie is a php agency producing high quality & widely used packages https://codeblog.jonskeet.uk/ was an architect at c# https://www.joelonsoftware.com/ founded stackoverflow tools: http://https//notepad-plus-plus.org/ as a fast editor for windows http://www.visualstudio.com/ as a C# IDE for windows http://www.jetbrains.com/ as an IDE for all platforms http://code.visualstudio.com/ as an editor for all platforms http://www.sublimetext.com/ as another editor mobile frameworks: http://cordova.apache.org/ http://ionicframework.com/ static analysis: http://fbinfer.com/ https://flow.org/ basic tools: ninite.com easeus partition master windirstat speccy httptrack username: https://knowem.com/checksocialnames.php https://checkusernames.com/ https://iwantmyname.com/ visualizations: https://gource.io/ for git https://insights.stackoverflow.com for technologies php resources: http://www.phptherightway.com/ https://bulletproofphp.dev/yes-php-is-worth-using frameworks: http://symfony.com/ http://www.slimframework.com/ http://laravel.com/ http://cakephp.org/ C compilers: https://www.xamarin.com/ Frontend https://tympanus.net/codrops/ reverse engineering hashes: http://crackstation.net/ toolkits: http://www.exploit-db.com/ https://www.kali.org/ https://www.metasploit.com/ programs: Reflector & FileDissassembler (dissassemble .NET) IDA Pro netcut/tuxcut no-ip DUC cheatengine firesheep Cain & Abel SMAC 2.7 colasoft mac scanner pro wireshark John the Ripper winpccap ettercap: configure etter.conf (UID = 0, GID = 0, exclude iptables) ettercap -T -Q -M arp:remote -i <wlandevice> urlsnarf -i <wlandevice> aircrack: airmon-ng check kill to finishes all processes that may interfer airmon-ng start <wlandevice> to generate new virtual monitordevice airdoump-ng <monitordevice> to dump all incoming packages airodump-ng -w wep -c <channel> --bssid <macadress> <monitordevice> to connect to the target network aireplay-ng -3 -a <macadress> <monitordevice> to generate additional traffic aireplay-ng -1 0 -b <macadress> <monitormode> to capture ARP packets and generate even more traffic ls to find name of the .cap file with the collected traffic aircrack-ng <packetname> to decrypt the key pentesting: http://www.enigmagroup.org/ https://www.hackthissite.org/ http://www.happy-security.de/","title":"Links"},{"location":"develop/links/#links","text":"awesome people: https://twitter.com/ajlkn is a skillful designer https://github.com/spatie is a php agency producing high quality & widely used packages https://codeblog.jonskeet.uk/ was an architect at c# https://www.joelonsoftware.com/ founded stackoverflow tools: http://https//notepad-plus-plus.org/ as a fast editor for windows http://www.visualstudio.com/ as a C# IDE for windows http://www.jetbrains.com/ as an IDE for all platforms http://code.visualstudio.com/ as an editor for all platforms http://www.sublimetext.com/ as another editor mobile frameworks: http://cordova.apache.org/ http://ionicframework.com/ static analysis: http://fbinfer.com/ https://flow.org/ basic tools: ninite.com easeus partition master windirstat speccy httptrack username: https://knowem.com/checksocialnames.php https://checkusernames.com/ https://iwantmyname.com/ visualizations: https://gource.io/ for git https://insights.stackoverflow.com for technologies","title":"Links"},{"location":"develop/links/#php","text":"resources: http://www.phptherightway.com/ https://bulletproofphp.dev/yes-php-is-worth-using frameworks: http://symfony.com/ http://www.slimframework.com/ http://laravel.com/ http://cakephp.org/","title":"php"},{"location":"develop/links/#c","text":"compilers: https://www.xamarin.com/","title":"C"},{"location":"develop/links/#frontend","text":"https://tympanus.net/codrops/","title":"Frontend"},{"location":"develop/links/#reverse-engineering","text":"hashes: http://crackstation.net/ toolkits: http://www.exploit-db.com/ https://www.kali.org/ https://www.metasploit.com/ programs: Reflector & FileDissassembler (dissassemble .NET) IDA Pro netcut/tuxcut no-ip DUC cheatengine firesheep Cain & Abel SMAC 2.7 colasoft mac scanner pro wireshark John the Ripper winpccap ettercap: configure etter.conf (UID = 0, GID = 0, exclude iptables) ettercap -T -Q -M arp:remote -i <wlandevice> urlsnarf -i <wlandevice> aircrack: airmon-ng check kill to finishes all processes that may interfer airmon-ng start <wlandevice> to generate new virtual monitordevice airdoump-ng <monitordevice> to dump all incoming packages airodump-ng -w wep -c <channel> --bssid <macadress> <monitordevice> to connect to the target network aireplay-ng -3 -a <macadress> <monitordevice> to generate additional traffic aireplay-ng -1 0 -b <macadress> <monitormode> to capture ARP packets and generate even more traffic ls to find name of the .cap file with the collected traffic aircrack-ng <packetname> to decrypt the key pentesting: http://www.enigmagroup.org/ https://www.hackthissite.org/ http://www.happy-security.de/","title":"reverse engineering"},{"location":"develop/patterns/","text":"Patterns useful to make program easier understandable & maintainable. resources: https://sourcemaking.com/ for patterns https://neverworkintheory.org/2021/08/29/software-development-waste.html for different ways of inefficient workflows https://refactoring.guru/refactoring/smells for different sources of smells Builder to create complex structures where only some part matters in the context it is used. Primarily used for testing, the builder provides a default structure, where the test-relevant parts can be set explicitly, but without the need to setup the other parts of the structure. Example class PersonBuilder { private Person _entity; public PersonBuilder() { this._entity = new Person() { GivenName = \"Martin\", FamilyName = \"Fowler\", PreferredColor = \"Green\" } } public PersonBuilder WithGivenName(string givenName) { this._entity.GivenName = givenName; return this; } public Person Build() { return this._entity; } } [TestClass] class EmailServiceTest { [TestMethod] public void FullNameShouldStartWithGivenName() { // Arrange var person = new PersonBuilder().WithGivenName(\"Dorthe\").Build(); // Act var fullName = person.GetFullName(); // Arrange fullName.Should().StartWith(\"Dorthe\"); } } Experiences Do create realistic structures as close to the business case as possible. This makes reading and debugging easier. Do not assume anything about the structures returned by the builder. This avoids duplication of business logic inside the builders and ensures the test explicitly configures the structure.","title":"Patterns"},{"location":"develop/patterns/#patterns","text":"useful to make program easier understandable & maintainable. resources: https://sourcemaking.com/ for patterns https://neverworkintheory.org/2021/08/29/software-development-waste.html for different ways of inefficient workflows https://refactoring.guru/refactoring/smells for different sources of smells","title":"Patterns"},{"location":"develop/patterns/#builder","text":"to create complex structures where only some part matters in the context it is used. Primarily used for testing, the builder provides a default structure, where the test-relevant parts can be set explicitly, but without the need to setup the other parts of the structure.","title":"Builder"},{"location":"develop/patterns/#example","text":"class PersonBuilder { private Person _entity; public PersonBuilder() { this._entity = new Person() { GivenName = \"Martin\", FamilyName = \"Fowler\", PreferredColor = \"Green\" } } public PersonBuilder WithGivenName(string givenName) { this._entity.GivenName = givenName; return this; } public Person Build() { return this._entity; } } [TestClass] class EmailServiceTest { [TestMethod] public void FullNameShouldStartWithGivenName() { // Arrange var person = new PersonBuilder().WithGivenName(\"Dorthe\").Build(); // Act var fullName = person.GetFullName(); // Arrange fullName.Should().StartWith(\"Dorthe\"); } }","title":"Example"},{"location":"develop/patterns/#experiences","text":"Do create realistic structures as close to the business case as possible. This makes reading and debugging easier. Do not assume anything about the structures returned by the builder. This avoids duplication of business logic inside the builders and ensures the test explicitly configures the structure.","title":"Experiences"},{"location":"develop/testing/","text":"Testing Be a tester, do not be a checker. Automate everything you can if it can be done in reasonable time. Static analysis Automatic eyes on your code; mostly cheap and helpful. Cyclomatic complexity assigns a number to a method resembling the complexity. This number can be used to identify complex methods which need a refactoring. The number is calculated using the control flow graph, and represents the number of linearly independent paths (for two following if-else constructs, the number would be three; two for the first if-else , and one to cover the possibly missed block of the second if-else ). Cognitive complexity tries to enhance cyclomatic complexity to better resemble understandability. The definition of cognitive complexity is no longer a mathematical model: It tries to calculate the perceived complexity of used structures. It follows simple rules: ignore structures with multiple combined statements (syntax sugar like ? ) increment for each break in the linear flow increment for nested structures To implement this rules the model uses four different types of increments and detailed specification for common structures (for example, multiple Boolean conditions combined with the same operator increase the score only by one). The increments are defined base on human judgement of the understandability of the structures- Using this notion, complex & nested algorithms are assigned a much higher number than easy switch-case structures. The number allows to compare entirely different methods, and promises to allow sensible comparisons on class / application level. Mock Design Avoid using mocks which specify how they are called as this locks the details of the implementation with the test . Instead use Stubs (answers specific to the test without reacting to input parameters). // pseudocode; var emailServiceStub = new Mock<IEmailService>(); // whenever the SendEmail(string email, string text) method is called, this stub returns true emailServiceStub.On(p => p.SendEmail, true); var serviceUnderTest = new Notifier(emailServiceStub.Stub); Use fluent assertions for easier reading of tests. // library: FluentAssertions var text = \"Lorem ipsum\"; test.Should().StartWith(\"Lorem\"); Name the test methods using one of the following templates: SendEmail_WhenNoEmailProvided_ThenThrowException(); GivenNoEmail_WhenSendEmailIsCalled_ThenThrowException(); Structure the tests with act, arrange, assert // Arrange var emailService = new EmailService(); // Act var result = emailService.SendEmail(\"info@example.com\", \"hello world\"); // Arrange result.Should().BeTrue();","title":"Testing"},{"location":"develop/testing/#testing","text":"Be a tester, do not be a checker. Automate everything you can if it can be done in reasonable time.","title":"Testing"},{"location":"develop/testing/#static-analysis","text":"Automatic eyes on your code; mostly cheap and helpful.","title":"Static analysis"},{"location":"develop/testing/#cyclomatic-complexity","text":"assigns a number to a method resembling the complexity. This number can be used to identify complex methods which need a refactoring. The number is calculated using the control flow graph, and represents the number of linearly independent paths (for two following if-else constructs, the number would be three; two for the first if-else , and one to cover the possibly missed block of the second if-else ).","title":"Cyclomatic complexity"},{"location":"develop/testing/#cognitive-complexity","text":"tries to enhance cyclomatic complexity to better resemble understandability. The definition of cognitive complexity is no longer a mathematical model: It tries to calculate the perceived complexity of used structures. It follows simple rules: ignore structures with multiple combined statements (syntax sugar like ? ) increment for each break in the linear flow increment for nested structures To implement this rules the model uses four different types of increments and detailed specification for common structures (for example, multiple Boolean conditions combined with the same operator increase the score only by one). The increments are defined base on human judgement of the understandability of the structures- Using this notion, complex & nested algorithms are assigned a much higher number than easy switch-case structures. The number allows to compare entirely different methods, and promises to allow sensible comparisons on class / application level.","title":"Cognitive complexity"},{"location":"develop/testing/#mock-design","text":"Avoid using mocks which specify how they are called as this locks the details of the implementation with the test . Instead use Stubs (answers specific to the test without reacting to input parameters). // pseudocode; var emailServiceStub = new Mock<IEmailService>(); // whenever the SendEmail(string email, string text) method is called, this stub returns true emailServiceStub.On(p => p.SendEmail, true); var serviceUnderTest = new Notifier(emailServiceStub.Stub); Use fluent assertions for easier reading of tests. // library: FluentAssertions var text = \"Lorem ipsum\"; test.Should().StartWith(\"Lorem\"); Name the test methods using one of the following templates: SendEmail_WhenNoEmailProvided_ThenThrowException(); GivenNoEmail_WhenSendEmailIsCalled_ThenThrowException(); Structure the tests with act, arrange, assert // Arrange var emailService = new EmailService(); // Act var result = emailService.SendEmail(\"info@example.com\", \"hello world\"); // Arrange result.Should().BeTrue();","title":"Mock Design"},{"location":"develop/web/","text":"Web generators: https://transfonter.org/ for CSS @font-face https://realfavicongenerator.net/ for FAV icon generator webpage checks (configuration): https://hstspreload.org/ for HSTS preload https://www.ssllabs.com/ssltest/analyze.htm for SSL test https://varvy.com/ for SEO attributes https://securityheaders.io/ for headers https://redbot.org/ for headers https://observatory.mozilla.org/ for security webpage checks (performance): http://gtmetrix.com/ https://developers.google.com/speed/pagespeed/insights/ https://performance.sucuri.net/ https://www.webpagetest.org/ http://yellowlab.tools/ https://tools.pingdom.com/ webpage checks (other): https://achecker.ca/checker/index.php for accessibility security: https://owasp.org/www-project-top-ten/ for OWSAP top 10 builders: https://www.wix.com/ https://www.squarespace.com http://www.imcreator.com/ https://tally.so/ for forms showcases (over the top): https://www.cssdesignawards.com/ https://www.awwwards.com/ showcases (practical): http://www.webcreme.com/, (typography heavy) https://land-book.com https://www.uplabs.com/ https://designmunk.com/ http://www.goodweb.design/ https://httpster.net/ https://www.siteinspire.com/ https://www.glance.fyi/ (browser by categories) UX: https://www.useronboard.com/user-onboarding-teardowns/ CMS: https://wordpress.org https://www.drupal.org/ https://typo3.org/ https://joomla.org/ https://craftcms.com/ https://contao.org/de/ icons: https://fontawesome.com/ http://icomoon.io/ http://ionicons.com/ SEO Webpage: set title & description set alt of image set https://moz.com/blog/meta-data-templates-123 only one h1, structure h2 etc sitemap Google: https://www.google.com/webmasters/tools/home https://www.google.com/business/ https://www.google.com/analytics/ https://trends.google.com/trends/ https://adwords.google.com/ko/KeywordPlanner/Home Bing: https://www.bing.com/toolbox/webmaster/ https://www.bingplaces.com/ Others: https://www.localsearch.ch/de/angebote-fuer-kmu/verzeichniswerbung (search.ch & local.ch)","title":"Web"},{"location":"develop/web/#web","text":"generators: https://transfonter.org/ for CSS @font-face https://realfavicongenerator.net/ for FAV icon generator webpage checks (configuration): https://hstspreload.org/ for HSTS preload https://www.ssllabs.com/ssltest/analyze.htm for SSL test https://varvy.com/ for SEO attributes https://securityheaders.io/ for headers https://redbot.org/ for headers https://observatory.mozilla.org/ for security webpage checks (performance): http://gtmetrix.com/ https://developers.google.com/speed/pagespeed/insights/ https://performance.sucuri.net/ https://www.webpagetest.org/ http://yellowlab.tools/ https://tools.pingdom.com/ webpage checks (other): https://achecker.ca/checker/index.php for accessibility security: https://owasp.org/www-project-top-ten/ for OWSAP top 10 builders: https://www.wix.com/ https://www.squarespace.com http://www.imcreator.com/ https://tally.so/ for forms showcases (over the top): https://www.cssdesignawards.com/ https://www.awwwards.com/ showcases (practical): http://www.webcreme.com/, (typography heavy) https://land-book.com https://www.uplabs.com/ https://designmunk.com/ http://www.goodweb.design/ https://httpster.net/ https://www.siteinspire.com/ https://www.glance.fyi/ (browser by categories) UX: https://www.useronboard.com/user-onboarding-teardowns/ CMS: https://wordpress.org https://www.drupal.org/ https://typo3.org/ https://joomla.org/ https://craftcms.com/ https://contao.org/de/ icons: https://fontawesome.com/ http://icomoon.io/ http://ionicons.com/","title":"Web"},{"location":"develop/web/#seo","text":"Webpage: set title & description set alt of image set https://moz.com/blog/meta-data-templates-123 only one h1, structure h2 etc sitemap Google: https://www.google.com/webmasters/tools/home https://www.google.com/business/ https://www.google.com/analytics/ https://trends.google.com/trends/ https://adwords.google.com/ko/KeywordPlanner/Home Bing: https://www.bing.com/toolbox/webmaster/ https://www.bingplaces.com/ Others: https://www.localsearch.ch/de/angebote-fuer-kmu/verzeichniswerbung (search.ch & local.ch)","title":"SEO"},{"location":"develop/books/clean%20code/","text":"Clean code The most important guideline is that each part of the software should have a single, minimal purpose. This documents code by the name its method is given, prevents the need for global state, leads to a single source of truth, ensures each loop only does one thing and only a single expression per line is used. you are doing it wrong if statements are complicated, methods long & nested, names complicated and ambiguous or changes need to be made at multiple locations for a single requirement change. you are doing it wrong if you would be doing it differently if you could rewrite it from scratch. you are doing it right if each line of code is at its single perfect location. Basic architecture Separate I/O classes (designed for persistance) from functional classes (designed for business) [13] Use stateful respositories to provide functional classes to the outside and process I/O classes in the inside [15, d] Use services to encapsulate functionality, stateless if business, possibly stateful if I/O [d] Use DI Container [1, 8, 17, c] or a factory to inject dependencies Respect the architecture of the framework / environment and add additional structures as described in architecture Workflow Continuously refactor when implementing new functionality [11, 18, c] Be humble (dont fight tools/framework/business/team) [16, 17, 18] Use the best tools available (IDE) and execute its optimization suggestions (remove unused, simplify statements) Reuse libraries, patterns, workflows, ... Do not assume behavior that is not documented in the interface [C] Ensure the highest levels are the cleanest [g] improves consistent development speed & integration of all good ideas. Global single minimal purpose (fewer than 7 local variables, properties, methods, ...) [2, 3, 7, 9, 14] use same level of abstraction together [2, 3, 4, 7, 8, 12] use shortest name possible (for example do not repeat part of the namespace in class names) [A] higher level of abstraction uses only next lower [8, 19, b] the level of abstraction hides details of implementation [A, B] separate areas likely to change [C] improves maintainability and reusability. Classes inheritance as means of specialization (use patterns for code-reuse) [6, a] inject implementation specific dependencies (like Logger, Storage) using the constructor. [1] stateless unless Naming / Pattern explicitly requires ( CacheService or similar). [1] improves high fan-in (many classes use this class) & low fan-out (the class uses itself few others). Methods use only injected dependencies of class (no global calls) & passed data (use Payload class if many arguments needed). [1, 12] if processing can not continue, throw an exception (wrap exceptions if necessary to not violate information hiding) [e] make parameters read-only and clearly typed (for example add the unit to variable name if not obvious) name like verb - object [E] minimize local variable lifetime (initialization & all usages) [f] single expression per line call only methods which affect the outcome (handle \"early-out\"s in the caller) loops do loop housekeeping at the end or the start of the loop prevent the need for break by factoring out the loop to a method prevent the need for continue by filtering the elements beforehand booleans test positive, expected cases first parentise boolean expressions explicitly compare falsy values compare in ranges; MIN < i && i < MAX avoid side effects while evaluating improves testability & predictable errors. Properties only publicly expose if needed for transfer include decision in class (expose isValid() instead of exposing the properties needed to check validity) [13, 14] name according to business domain push modifies (like Sum, Total, ..) at the end of the name (except for example first which must be a prefix to make sense) [E] omit type prefix/suffix, instead use a variable name which clearly indicates the form of the data (like processingCompleted which implies only true / false as value range) [E] improves single source of truth Literature Included advice: [A] use abstraction to make a problem simpler [B] respect literal & semantic encapsulation (do not expose more than necessary, do not infer behavior by looking at implementation) [C] separate areas likely to change (ever-changing business rules, unstable environment) [D] use patterns to quickly communicate design ideas [E] adopt consistency conventions Included principles: [1] Explicit Dependencies Principle [2] Separation of Concerns [3] Once and Only Once [4] Single Responsibility Principle S [5] Open/Close Principle -> LOOK UP [6] Liskov Substitution Principle L [7] Interface Segregation Principle I [8] Dependency Inversion Principle D [9] Dont repeat yourself DRY [10] Tell dont ask TDA [11] Boy Scout Rule [12] Law of Demeter (only talk to immediate friends) [13] Tell Dont Ask [14] Encapsulation [15] Persistence Ignorance [16] You Aint Gonna Need It YAGNI [17] Inversion of Control IoC, Hollywood Principle or Dont call us, we call you (let framework dictate application flow) [18] Keep it simple KISS [19] Stable dependencies Own principles: [a] no manual type checks [b] prefer stateless [c] do not write boilerplate [d] separate I/O from business processing [e] do not hide errors [f] group related statements together [g] higher levels should be of higher quality","title":"Clean code"},{"location":"develop/books/clean%20code/#clean-code","text":"The most important guideline is that each part of the software should have a single, minimal purpose. This documents code by the name its method is given, prevents the need for global state, leads to a single source of truth, ensures each loop only does one thing and only a single expression per line is used. you are doing it wrong if statements are complicated, methods long & nested, names complicated and ambiguous or changes need to be made at multiple locations for a single requirement change. you are doing it wrong if you would be doing it differently if you could rewrite it from scratch. you are doing it right if each line of code is at its single perfect location.","title":"Clean code"},{"location":"develop/books/clean%20code/#basic-architecture","text":"Separate I/O classes (designed for persistance) from functional classes (designed for business) [13] Use stateful respositories to provide functional classes to the outside and process I/O classes in the inside [15, d] Use services to encapsulate functionality, stateless if business, possibly stateful if I/O [d] Use DI Container [1, 8, 17, c] or a factory to inject dependencies Respect the architecture of the framework / environment and add additional structures as described in architecture","title":"Basic architecture"},{"location":"develop/books/clean%20code/#workflow","text":"Continuously refactor when implementing new functionality [11, 18, c] Be humble (dont fight tools/framework/business/team) [16, 17, 18] Use the best tools available (IDE) and execute its optimization suggestions (remove unused, simplify statements) Reuse libraries, patterns, workflows, ... Do not assume behavior that is not documented in the interface [C] Ensure the highest levels are the cleanest [g] improves consistent development speed & integration of all good ideas.","title":"Workflow"},{"location":"develop/books/clean%20code/#global","text":"single minimal purpose (fewer than 7 local variables, properties, methods, ...) [2, 3, 7, 9, 14] use same level of abstraction together [2, 3, 4, 7, 8, 12] use shortest name possible (for example do not repeat part of the namespace in class names) [A] higher level of abstraction uses only next lower [8, 19, b] the level of abstraction hides details of implementation [A, B] separate areas likely to change [C] improves maintainability and reusability.","title":"Global"},{"location":"develop/books/clean%20code/#classes","text":"inheritance as means of specialization (use patterns for code-reuse) [6, a] inject implementation specific dependencies (like Logger, Storage) using the constructor. [1] stateless unless Naming / Pattern explicitly requires ( CacheService or similar). [1] improves high fan-in (many classes use this class) & low fan-out (the class uses itself few others).","title":"Classes"},{"location":"develop/books/clean%20code/#methods","text":"use only injected dependencies of class (no global calls) & passed data (use Payload class if many arguments needed). [1, 12] if processing can not continue, throw an exception (wrap exceptions if necessary to not violate information hiding) [e] make parameters read-only and clearly typed (for example add the unit to variable name if not obvious) name like verb - object [E] minimize local variable lifetime (initialization & all usages) [f] single expression per line call only methods which affect the outcome (handle \"early-out\"s in the caller)","title":"Methods"},{"location":"develop/books/clean%20code/#loops","text":"do loop housekeeping at the end or the start of the loop prevent the need for break by factoring out the loop to a method prevent the need for continue by filtering the elements beforehand","title":"loops"},{"location":"develop/books/clean%20code/#booleans","text":"test positive, expected cases first parentise boolean expressions explicitly compare falsy values compare in ranges; MIN < i && i < MAX avoid side effects while evaluating improves testability & predictable errors.","title":"booleans"},{"location":"develop/books/clean%20code/#properties","text":"only publicly expose if needed for transfer include decision in class (expose isValid() instead of exposing the properties needed to check validity) [13, 14] name according to business domain push modifies (like Sum, Total, ..) at the end of the name (except for example first which must be a prefix to make sense) [E] omit type prefix/suffix, instead use a variable name which clearly indicates the form of the data (like processingCompleted which implies only true / false as value range) [E] improves single source of truth","title":"Properties"},{"location":"develop/books/clean%20code/#literature","text":"Included advice: [A] use abstraction to make a problem simpler [B] respect literal & semantic encapsulation (do not expose more than necessary, do not infer behavior by looking at implementation) [C] separate areas likely to change (ever-changing business rules, unstable environment) [D] use patterns to quickly communicate design ideas [E] adopt consistency conventions Included principles: [1] Explicit Dependencies Principle [2] Separation of Concerns [3] Once and Only Once [4] Single Responsibility Principle S [5] Open/Close Principle -> LOOK UP [6] Liskov Substitution Principle L [7] Interface Segregation Principle I [8] Dependency Inversion Principle D [9] Dont repeat yourself DRY [10] Tell dont ask TDA [11] Boy Scout Rule [12] Law of Demeter (only talk to immediate friends) [13] Tell Dont Ask [14] Encapsulation [15] Persistence Ignorance [16] You Aint Gonna Need It YAGNI [17] Inversion of Control IoC, Hollywood Principle or Dont call us, we call you (let framework dictate application flow) [18] Keep it simple KISS [19] Stable dependencies Own principles: [a] no manual type checks [b] prefer stateless [c] do not write boilerplate [d] separate I/O from business processing [e] do not hide errors [f] group related statements together [g] higher levels should be of higher quality","title":"Literature"},{"location":"develop/books/code%20complete/","text":"Software development process construction site analogy skyscraper needs different approach than simple shed to rebuild a house with a different architecture is expensive to move a wall to another place is expensive due to the labour it requires, not due to the materials prebuilt components like dishwashers are bought or expensively reinvented planning and building can be done in stages (like foundation and interior details) changes to a load bearing wall are much more expensive than to a simple room divider if a skyscraper is build, some precautions / safety margins have to be made to reduce risk there are many different ways to build a house so it needs to be clearly defined how its supposed to look like quality is nearly invisible, but saves much money in the long run continuous maintenance avoids having to reconstruct the whole house after 10 years to start a software project you need a clear vision about what problem will be solved. this helps the team to align, enables \"common sense\" and generates a multitude of solution. work effective work in iteration that are as small as possible while still providing some business benefit. the reduced complexity speeds up exponentially and the focus can shift much quicker. reduce iteration size further with high risk, complex applications, inexperienced team and changing circumstances. scaling is not linear; it is much less efficient. people write less code with more error in more time. construction activity decreases and instead design, integration, architecture & testing need more effort. encourage good coding by letting a though leader set standards, best practices or guidelines- ensure at least two people work on the same code, review all changes and ensure collective ownership of code & responsibility is take seriously. products need to be polished more than simple tools, systems need to have more careful interfaces than products. as more people work on the same, more potential connections need to be made & more potential conflicts need to be resolved & the need for more formal documentation increases. effectiveness changes due to setup (documentation, tools), people (skills, experience, continuity), product (complexity, speed & storage constrains, size of data), project management (early failure detection effectiveness, customer relationship, quality/clarity of requirements, risk management). orders of magnitude are between a top programmer and an underperforming one (1:10 and more). bad teams need 3.5 times more time than good ones, and attract even more bad programmers (and vice-versa). a quiet, private, interruption-free and big office doubles productivity. scaling tips: use trunk based development to avoid merging hell limit WIP to detect & resolve bottlenecks use central test data management for easier e2e test setup iteration define specific, verifiable goals to get close to the vision. analyze the risks with the goals to archive. define the required quality of user interaction, design and architecture (experimental, MVP, market-ready?). gather first use cases and analyze how to introduce, maintain and sunset the tool. work out high level specification with wireframes to align how these goals should be reached. structure the project to reduce the risks early. choose concrete approaches to reach the required quality. sketch deployment pipeline, organize support and continuous maintenance. estimate the time needed to implement and the requirements and align with availabilities. adjust the development practices according to the scale of the project. scale utilities: code reviews clear responsibilities architecture planning design reviews more rigid requirements formal change control requirement reviews deployment procedure test planning different QA team requirements engineering requirements as a whole should produce a ready-to-use product (use cases, inputs, outputs), not conflict with each other and in a language/granularity that is consistent and understood by users / third parties. they may also contain non-functional requirements as response time, error recovery, maintainability. each requirement should be relevant to the problem, technically feasible and testable. explicit requirements can be approved by users (rather than chosen by the programmer), avoid arguments and can detect conceptual issues early. but they may also prevent taking a shorter path to the target detected while implementing (for example a different export format which is easier to implement). requirements can change anytime, but the changing business value, cost and schedule have to be considered wisely. if requirements change often, introduce formal procedure to make process transparent and scalable. estimation estimate duration at low level (few hours) and take the time to do it properly. multiply with factor depending on unknowns, but minimally x1.2. use appropriate unit to communicate accuracy of whole estimation. prioritize according to (sum of business value + risk reduction + opportunity enabler factor) / duration. for easier estimates, ask someone who has done it before, work in iterations or use relative estimation between all available items. design use believable test data to increase understandability (hence avoid lorem ipsum). develop relax; only publish solid, tested code under any circumstance, never lower the bar of minimal quality, especially not under error-prone, high-pressure situations: short-term benefits are not worth the risk and cost of the long-term. if tests are needed, write them as soon as the public interface is ready. for non-obvious bugs, always advance using hypothesis (not blindly bruteforcing), list things to try and always work on most promising one, check code that has changed recently/often, discuss with someone else or simply take a break. for low-level performance improvements, order case statements by frequency, create lookup array instead of if/else constructs for multiple deciding factors, simplify loops (take if/else outside), combine loops that iterate over same data, unroll loops (take multiple steps in same iteration), use faster arithmetic, remove method calls, choose different data types/structures, reduce array dimensions, reduce array/object accesses, use caching & precompute expensive calculations. document surprises (like performance improvements, workarounds) and what can not be expressed by code (like special math operations), focusing on the why not the how. quality assurance formally define the prioritization of the quality objectives, and use guidelines/best practices, informal/formal reviews & external audits to implement it. while quality assurance needs more time upfront, it does not increase the total cost because it leads to software with fewer defects (less time spent on support). external quality metrics (user perceived) are correctness, integrity (access control & data sanity), usability, reliability (few failures), efficiency, adaptability (fit for different purposes), accuracy (fit for purpose) & robustness (functioning under invalid input). internal quality metrics (developer perceived) are understandability (high-level structure), maintainability, testability, readability (statement level), reusability, flexibility & portability. use a combination of prototyping, design/code reviews, unit/integration/e2e testing & regression/system testing to archive acceptable fault levels. use pair programming, formal reviews (discuss code using clear roles including reviewer, scribe, moderator, author), walk through (present code/concept by the author) and code reviews to educate authors & propagate knowledge and experience. https://github.com/google/eng-practices for help how to do a PR review testing for unit testing, create test cases according to statement, branch, definition/use pair, loop (0, 1, any) or boundary (min, any, max) coverage (white-box approach). include test cases for dirty (erroneous) cases by using too much, too few or wrongly typed data. for integration testing, focus on the interaction of the components but avoid to retest the guarantees established by the unit tests (black-box approach). for e2e testing, focus on complete user interactions representing sensible use cases but avoid to increase coupling. document for errors how much time they needed to be found, where they are located and what the root cause was (off-by-one, nullRef). bugs tends to be concentrated on specific parts of the software; find those and minimize the impact with refactorings & common-cases-checklists.","title":"Software development process"},{"location":"develop/books/code%20complete/#software-development-process","text":"construction site analogy skyscraper needs different approach than simple shed to rebuild a house with a different architecture is expensive to move a wall to another place is expensive due to the labour it requires, not due to the materials prebuilt components like dishwashers are bought or expensively reinvented planning and building can be done in stages (like foundation and interior details) changes to a load bearing wall are much more expensive than to a simple room divider if a skyscraper is build, some precautions / safety margins have to be made to reduce risk there are many different ways to build a house so it needs to be clearly defined how its supposed to look like quality is nearly invisible, but saves much money in the long run continuous maintenance avoids having to reconstruct the whole house after 10 years to start a software project you need a clear vision about what problem will be solved. this helps the team to align, enables \"common sense\" and generates a multitude of solution.","title":"Software development process"},{"location":"develop/books/code%20complete/#work-effective","text":"work in iteration that are as small as possible while still providing some business benefit. the reduced complexity speeds up exponentially and the focus can shift much quicker. reduce iteration size further with high risk, complex applications, inexperienced team and changing circumstances. scaling is not linear; it is much less efficient. people write less code with more error in more time. construction activity decreases and instead design, integration, architecture & testing need more effort. encourage good coding by letting a though leader set standards, best practices or guidelines- ensure at least two people work on the same code, review all changes and ensure collective ownership of code & responsibility is take seriously. products need to be polished more than simple tools, systems need to have more careful interfaces than products. as more people work on the same, more potential connections need to be made & more potential conflicts need to be resolved & the need for more formal documentation increases. effectiveness changes due to setup (documentation, tools), people (skills, experience, continuity), product (complexity, speed & storage constrains, size of data), project management (early failure detection effectiveness, customer relationship, quality/clarity of requirements, risk management). orders of magnitude are between a top programmer and an underperforming one (1:10 and more). bad teams need 3.5 times more time than good ones, and attract even more bad programmers (and vice-versa). a quiet, private, interruption-free and big office doubles productivity. scaling tips: use trunk based development to avoid merging hell limit WIP to detect & resolve bottlenecks use central test data management for easier e2e test setup","title":"work effective"},{"location":"develop/books/code%20complete/#iteration","text":"define specific, verifiable goals to get close to the vision. analyze the risks with the goals to archive. define the required quality of user interaction, design and architecture (experimental, MVP, market-ready?). gather first use cases and analyze how to introduce, maintain and sunset the tool. work out high level specification with wireframes to align how these goals should be reached. structure the project to reduce the risks early. choose concrete approaches to reach the required quality. sketch deployment pipeline, organize support and continuous maintenance. estimate the time needed to implement and the requirements and align with availabilities. adjust the development practices according to the scale of the project. scale utilities: code reviews clear responsibilities architecture planning design reviews more rigid requirements formal change control requirement reviews deployment procedure test planning different QA team","title":"iteration"},{"location":"develop/books/code%20complete/#requirements-engineering","text":"requirements as a whole should produce a ready-to-use product (use cases, inputs, outputs), not conflict with each other and in a language/granularity that is consistent and understood by users / third parties. they may also contain non-functional requirements as response time, error recovery, maintainability. each requirement should be relevant to the problem, technically feasible and testable. explicit requirements can be approved by users (rather than chosen by the programmer), avoid arguments and can detect conceptual issues early. but they may also prevent taking a shorter path to the target detected while implementing (for example a different export format which is easier to implement). requirements can change anytime, but the changing business value, cost and schedule have to be considered wisely. if requirements change often, introduce formal procedure to make process transparent and scalable.","title":"requirements engineering"},{"location":"develop/books/code%20complete/#estimation","text":"estimate duration at low level (few hours) and take the time to do it properly. multiply with factor depending on unknowns, but minimally x1.2. use appropriate unit to communicate accuracy of whole estimation. prioritize according to (sum of business value + risk reduction + opportunity enabler factor) / duration. for easier estimates, ask someone who has done it before, work in iterations or use relative estimation between all available items.","title":"estimation"},{"location":"develop/books/code%20complete/#design","text":"use believable test data to increase understandability (hence avoid lorem ipsum).","title":"design"},{"location":"develop/books/code%20complete/#develop","text":"relax; only publish solid, tested code under any circumstance, never lower the bar of minimal quality, especially not under error-prone, high-pressure situations: short-term benefits are not worth the risk and cost of the long-term. if tests are needed, write them as soon as the public interface is ready. for non-obvious bugs, always advance using hypothesis (not blindly bruteforcing), list things to try and always work on most promising one, check code that has changed recently/often, discuss with someone else or simply take a break. for low-level performance improvements, order case statements by frequency, create lookup array instead of if/else constructs for multiple deciding factors, simplify loops (take if/else outside), combine loops that iterate over same data, unroll loops (take multiple steps in same iteration), use faster arithmetic, remove method calls, choose different data types/structures, reduce array dimensions, reduce array/object accesses, use caching & precompute expensive calculations. document surprises (like performance improvements, workarounds) and what can not be expressed by code (like special math operations), focusing on the why not the how.","title":"develop"},{"location":"develop/books/code%20complete/#quality-assurance","text":"formally define the prioritization of the quality objectives, and use guidelines/best practices, informal/formal reviews & external audits to implement it. while quality assurance needs more time upfront, it does not increase the total cost because it leads to software with fewer defects (less time spent on support). external quality metrics (user perceived) are correctness, integrity (access control & data sanity), usability, reliability (few failures), efficiency, adaptability (fit for different purposes), accuracy (fit for purpose) & robustness (functioning under invalid input). internal quality metrics (developer perceived) are understandability (high-level structure), maintainability, testability, readability (statement level), reusability, flexibility & portability. use a combination of prototyping, design/code reviews, unit/integration/e2e testing & regression/system testing to archive acceptable fault levels. use pair programming, formal reviews (discuss code using clear roles including reviewer, scribe, moderator, author), walk through (present code/concept by the author) and code reviews to educate authors & propagate knowledge and experience. https://github.com/google/eng-practices for help how to do a PR review","title":"quality assurance"},{"location":"develop/books/code%20complete/#testing","text":"for unit testing, create test cases according to statement, branch, definition/use pair, loop (0, 1, any) or boundary (min, any, max) coverage (white-box approach). include test cases for dirty (erroneous) cases by using too much, too few or wrongly typed data. for integration testing, focus on the interaction of the components but avoid to retest the guarantees established by the unit tests (black-box approach). for e2e testing, focus on complete user interactions representing sensible use cases but avoid to increase coupling. document for errors how much time they needed to be found, where they are located and what the root cause was (off-by-one, nullRef). bugs tends to be concentrated on specific parts of the software; find those and minimize the impact with refactorings & common-cases-checklists.","title":"testing"},{"location":"develop/books/lateral%20thinking/","text":"lateral thinking concerned with possibilities, what might be; tries to be different to normal, deduction based conclusions Techniques Use a creative pause; meaning simply stop for some time trying to come up with something new. Change the focus to a different aspect of the problem. You can choose a purposed focus \"make room cleaner\", but be careful how it is phrased as it probably contains prejudgments. Alternatively you can choose a general area type focus \"improve my room\", and then only pursue ideas that go into the defined boundaries. You can create a creative challenge, by asking why something is done that way. Once you have found some answers, you can create a creative challenge by either blocking (\"the maschine no longer exists\"), escaping (\"we do not need the result anymore at all\") or dropping (\"we can satify the need differently\") Look for alternatives, even when there is none needed at the moment. Create alternatives by fixing purpose, resemblance (lookalikes), group (type of thing) or concept (\"reward for work\"). Tackle a bigger concept than the one in question at the moment; by asking \"how does it help\" (homeoffice -> reduce traffic). Go into the other direction by asking \"how can we implement this\" (reduce traffic -> different work schedules). Abstract a concrete process/product into its concepts (like fast food -> cheap, standardized, fast). You may encounter concepts that are purpose based (like umbrella -> protection from the rain), mechanism based (like umbrella -> roof) and value based (like umbrella -> convenient). Then improve on these concepts, potentially strengthen them, implement or combine them differently. Provoke with proposing unusual/absurd solutions to enable unusual perspectives. Lateral thinking book, at P151 PMI: Scan plus points, then minus points, then interesting points where to apply in EnterpriseTM: get more improvement propositions at every level enable better fitting problem descriptions as both broad & narrow is looked at develop new opportunities from already existing resources devise strategies which fit multiple possible futures get employees more interested (hence motivated) into their work","title":"lateral thinking"},{"location":"develop/books/lateral%20thinking/#lateral-thinking","text":"concerned with possibilities, what might be; tries to be different to normal, deduction based conclusions","title":"lateral thinking"},{"location":"develop/books/lateral%20thinking/#techniques","text":"Use a creative pause; meaning simply stop for some time trying to come up with something new. Change the focus to a different aspect of the problem. You can choose a purposed focus \"make room cleaner\", but be careful how it is phrased as it probably contains prejudgments. Alternatively you can choose a general area type focus \"improve my room\", and then only pursue ideas that go into the defined boundaries. You can create a creative challenge, by asking why something is done that way. Once you have found some answers, you can create a creative challenge by either blocking (\"the maschine no longer exists\"), escaping (\"we do not need the result anymore at all\") or dropping (\"we can satify the need differently\") Look for alternatives, even when there is none needed at the moment. Create alternatives by fixing purpose, resemblance (lookalikes), group (type of thing) or concept (\"reward for work\"). Tackle a bigger concept than the one in question at the moment; by asking \"how does it help\" (homeoffice -> reduce traffic). Go into the other direction by asking \"how can we implement this\" (reduce traffic -> different work schedules). Abstract a concrete process/product into its concepts (like fast food -> cheap, standardized, fast). You may encounter concepts that are purpose based (like umbrella -> protection from the rain), mechanism based (like umbrella -> roof) and value based (like umbrella -> convenient). Then improve on these concepts, potentially strengthen them, implement or combine them differently. Provoke with proposing unusual/absurd solutions to enable unusual perspectives. Lateral thinking book, at P151 PMI: Scan plus points, then minus points, then interesting points where to apply in EnterpriseTM: get more improvement propositions at every level enable better fitting problem descriptions as both broad & narrow is looked at develop new opportunities from already existing resources devise strategies which fit multiple possible futures get employees more interested (hence motivated) into their work","title":"Techniques"},{"location":"develop/web/enterprise%20architectures/","text":"Enterprise architectures When a framework alone is not enough to handle complexity / workload, you need more powerful patterns. Consistency guidelines be aware of the stability of the environment and take precautions (experimental technologies need a time buffer to account for bugs in tooling). define code style, tool chain, testing approach (TDD or similar) and definition of done. use conventions to prevent religious wars. define error processing: corrective (try to continue) / detective (fail) active (plausibility checks) / passive (fail if no way to continue) propagation (fail at first invalid input or after checking all) consistent error messages Domain driven design eases the development by introducing knowledge about the business process in the application naming / class concept, down to the database. Entities are transformed to fit the domain they are using in (for example, while accounting needs the address of a person, the authentication only needs username/password). A developer now only needs to understand the domain he is currently working in, and can ignore the other parts of the application. Naming of variables and hierarchic structures can be adjusted to the business case. At the same time, other parts of the application can evolve easily in their respective domain, as their changes (like new fields, objects) need not to be propagated into other domains. The downsides include the maintenance of the transformation logic and alignment efforts when business terminology changes. Microservices decouples parts of the application in separate services connected via a REST interface. The services expose a REST interface to be accessed by the other services. Internally, the services may differ in architecture, database, technology, ... This setup eases updates, as single services can be replaced one after another. If a service of a specific type is behind a load balancer, it is also possible to use more or less instances of said service depending on the demand. The downsides include that services may never be able to change their interface once specified, as they do not know which services use it. Event sourcing formulate all changes in event. interested parties listen to specific events and update their local state accordingly. all events are saved, and can be replayed to reproduce bugs or recalculate state after a bugfix. CQRS (command query responsibility segregation) separate the command and query model, unlocking the ability to optimize each model for their specific use cases. the command model updates the database according to user commands. the query model gather data from the database for display. Command / Event separation separate commands (actions which modify state) and events (results of such actions) to ease scalability. Commands are created to perform changes in the database or execute other actions. The command handler, upon completion, publishes events with the result of the modification which are received by all interested parties. This setup allows to separate applications/components which modify state (those who execute the business logic attached to a specific command) from application which only need to process state (those who display to the user or evaluate data). The commands can also be stored for auditing purposes, effectively giving a chain of actions executed by a user independent of the origin of such a command. It eases domain driven design, as the event handlers which contain the new state are the perfect access point to transform the received entities from possible other parts of the application to the structure the active domain fits best. The downsides include similar problems than with most distributed systems; reordering of events or consistency issues if an event is lost or not processed fully yet (one command may provokes multiple different events, which themselves have again side effects the user has to wait for). Similar to services, it is also unclear (by design!) which components consume the events and commands. To battle the downsides, carefully design how the events/commands transfer is setup, for example using a message queue which provides the required properties. Avoid complex events/commands and exposing domain-private information to avoid having to propagate changes inside the domain to others. Onion use layers to separate different kind of logic (presentation, business, domain). The Domain layer is the innermost layer, containing entities and, if DDD is used, some of the logic to apply changes to those entities. The next outer layer is the domain service layer, providing together with the application service layer the business features. The outermost layer contains the IO, like presentation or database access. If strict layering is used, then the outer layer may only access the next inner layer. If loose layering is used, then an outer layers may access any inner layer. It is never allowed to reverse the call chain; if logic from the outside is needed, an interface implementation can be requested by the inner layer. This design eases separation of concern, ease testing and makes it easier to replace a layer if necessary. The strict layering makes these advantages even more strict. The downsides include that mapping efforts may increase substantially; the same entity may exist in multiple layers and needs to be mapped each time it is passed to an inner layer (as this layer is not allowed to access the outer source). To battle the downsides, allow loose layering (at the cost that it is easier for an outer layer to access/modify something from an inner layer it is not supposed to). Hexagonal (adapter & ports) structure the application around use cases which fully define how they interact with the environment (both in- and output). The business logic sits inside the \"hexagon\". It defines interfaces to interact with the outside. These touch points with the outside are composed of ports (an interface) and adapters (an implementation of that interface). As the inside defines the interfaces, it does not have any dependency to the outside. Advantages of that approach include that a use case can be separated cleanly from others, and makes structuring the application by use case easy. It is easily testable as dependencies from a single use cases can be mocked simply. To replace dependencies from a single use cases is easy, hence even larger technology migrations can be done incrementally without touching the business logic. The downsides include that for each hexagon, many potentially similar entities (and hence mappings) need to be created. Also, many very specific interfaces need to be implemented. To battle the downsides, you may include multiple similar use cases in the same hexagon. If abstracted properly pure technicalities may also be shared by multiple hexagons.","title":"Enterprise architectures"},{"location":"develop/web/enterprise%20architectures/#enterprise-architectures","text":"When a framework alone is not enough to handle complexity / workload, you need more powerful patterns.","title":"Enterprise architectures"},{"location":"develop/web/enterprise%20architectures/#consistency-guidelines","text":"be aware of the stability of the environment and take precautions (experimental technologies need a time buffer to account for bugs in tooling). define code style, tool chain, testing approach (TDD or similar) and definition of done. use conventions to prevent religious wars. define error processing: corrective (try to continue) / detective (fail) active (plausibility checks) / passive (fail if no way to continue) propagation (fail at first invalid input or after checking all) consistent error messages","title":"Consistency guidelines"},{"location":"develop/web/enterprise%20architectures/#domain-driven-design","text":"eases the development by introducing knowledge about the business process in the application naming / class concept, down to the database. Entities are transformed to fit the domain they are using in (for example, while accounting needs the address of a person, the authentication only needs username/password). A developer now only needs to understand the domain he is currently working in, and can ignore the other parts of the application. Naming of variables and hierarchic structures can be adjusted to the business case. At the same time, other parts of the application can evolve easily in their respective domain, as their changes (like new fields, objects) need not to be propagated into other domains. The downsides include the maintenance of the transformation logic and alignment efforts when business terminology changes.","title":"Domain driven design"},{"location":"develop/web/enterprise%20architectures/#microservices","text":"decouples parts of the application in separate services connected via a REST interface. The services expose a REST interface to be accessed by the other services. Internally, the services may differ in architecture, database, technology, ... This setup eases updates, as single services can be replaced one after another. If a service of a specific type is behind a load balancer, it is also possible to use more or less instances of said service depending on the demand. The downsides include that services may never be able to change their interface once specified, as they do not know which services use it.","title":"Microservices"},{"location":"develop/web/enterprise%20architectures/#event-sourcing","text":"formulate all changes in event. interested parties listen to specific events and update their local state accordingly. all events are saved, and can be replayed to reproduce bugs or recalculate state after a bugfix.","title":"Event sourcing"},{"location":"develop/web/enterprise%20architectures/#cqrs-command-query-responsibility-segregation","text":"separate the command and query model, unlocking the ability to optimize each model for their specific use cases. the command model updates the database according to user commands. the query model gather data from the database for display.","title":"CQRS (command query responsibility segregation)"},{"location":"develop/web/enterprise%20architectures/#command-event-separation","text":"separate commands (actions which modify state) and events (results of such actions) to ease scalability. Commands are created to perform changes in the database or execute other actions. The command handler, upon completion, publishes events with the result of the modification which are received by all interested parties. This setup allows to separate applications/components which modify state (those who execute the business logic attached to a specific command) from application which only need to process state (those who display to the user or evaluate data). The commands can also be stored for auditing purposes, effectively giving a chain of actions executed by a user independent of the origin of such a command. It eases domain driven design, as the event handlers which contain the new state are the perfect access point to transform the received entities from possible other parts of the application to the structure the active domain fits best. The downsides include similar problems than with most distributed systems; reordering of events or consistency issues if an event is lost or not processed fully yet (one command may provokes multiple different events, which themselves have again side effects the user has to wait for). Similar to services, it is also unclear (by design!) which components consume the events and commands. To battle the downsides, carefully design how the events/commands transfer is setup, for example using a message queue which provides the required properties. Avoid complex events/commands and exposing domain-private information to avoid having to propagate changes inside the domain to others.","title":"Command / Event separation"},{"location":"develop/web/enterprise%20architectures/#onion","text":"use layers to separate different kind of logic (presentation, business, domain). The Domain layer is the innermost layer, containing entities and, if DDD is used, some of the logic to apply changes to those entities. The next outer layer is the domain service layer, providing together with the application service layer the business features. The outermost layer contains the IO, like presentation or database access. If strict layering is used, then the outer layer may only access the next inner layer. If loose layering is used, then an outer layers may access any inner layer. It is never allowed to reverse the call chain; if logic from the outside is needed, an interface implementation can be requested by the inner layer. This design eases separation of concern, ease testing and makes it easier to replace a layer if necessary. The strict layering makes these advantages even more strict. The downsides include that mapping efforts may increase substantially; the same entity may exist in multiple layers and needs to be mapped each time it is passed to an inner layer (as this layer is not allowed to access the outer source). To battle the downsides, allow loose layering (at the cost that it is easier for an outer layer to access/modify something from an inner layer it is not supposed to).","title":"Onion"},{"location":"develop/web/enterprise%20architectures/#hexagonal-adapter-ports","text":"structure the application around use cases which fully define how they interact with the environment (both in- and output). The business logic sits inside the \"hexagon\". It defines interfaces to interact with the outside. These touch points with the outside are composed of ports (an interface) and adapters (an implementation of that interface). As the inside defines the interfaces, it does not have any dependency to the outside. Advantages of that approach include that a use case can be separated cleanly from others, and makes structuring the application by use case easy. It is easily testable as dependencies from a single use cases can be mocked simply. To replace dependencies from a single use cases is easy, hence even larger technology migrations can be done incrementally without touching the business logic. The downsides include that for each hexagon, many potentially similar entities (and hence mappings) need to be created. Also, many very specific interfaces need to be implemented. To battle the downsides, you may include multiple similar use cases in the same hexagon. If abstracted properly pure technicalities may also be shared by multiple hexagons.","title":"Hexagonal (adapter &amp; ports)"},{"location":"develop/web/forensic%20incident%20note%20taking/","text":"Forensic incident node taking structure notes into People, Places, Things and Events to make it transparent what happened All notes include information source , created at and created by . For persons, you may include names, phone numbers and occupation. For the others, simply include a description. Do not adjust an existing note; create the new information same as a new note, then mark the old note as deprecated. Take physical notes if you do need them to be evidence or if you are in an untrusted environment. Take digital notes to ease collaboration and for more efficient workflows.","title":"Forensic incident node taking"},{"location":"develop/web/forensic%20incident%20note%20taking/#forensic-incident-node-taking","text":"structure notes into People, Places, Things and Events to make it transparent what happened All notes include information source , created at and created by . For persons, you may include names, phone numbers and occupation. For the others, simply include a description. Do not adjust an existing note; create the new information same as a new note, then mark the old note as deprecated. Take physical notes if you do need them to be evidence or if you are in an untrusted environment. Take digital notes to ease collaboration and for more efficient workflows.","title":"Forensic incident node taking"},{"location":"non-work/entertainment/","text":"Entertainment Comics: https://www.xkcd.com/ for nerdy comics Web: https://theuselessweb.com/ for an endless stream of strange webpages https://www.discuvver.com/ for \"useful\" webpages https://pdos.csail.mit.edu/archive/scigen/ for fake paper generation Music: https://emmitfenn.com for amazing visuals fit to the sound https://www.incredibox.com/ to create music with others http://dinahmoelabs.com/plink/ to create music with others https://www.noisli.com/ to create ambiance music http://soundrown.com/ to create ambiance music https://emmitfenn.com music with visuals combined https://radioparadise.com/ for DJ music https://tidal.com/ for streaming https://everynoise.com/ to discover music genres Draw: http://weavesilk.com/ to draw silk online Exercise:: https://musclewiki.com Art: https://www.nivrozenberg.com/fineart#/summit/ https://www.patrikfuchs.com/10065593/isolatoren","title":"Entertainment"},{"location":"non-work/entertainment/#entertainment","text":"Comics: https://www.xkcd.com/ for nerdy comics Web: https://theuselessweb.com/ for an endless stream of strange webpages https://www.discuvver.com/ for \"useful\" webpages https://pdos.csail.mit.edu/archive/scigen/ for fake paper generation Music: https://emmitfenn.com for amazing visuals fit to the sound https://www.incredibox.com/ to create music with others http://dinahmoelabs.com/plink/ to create music with others https://www.noisli.com/ to create ambiance music http://soundrown.com/ to create ambiance music https://emmitfenn.com music with visuals combined https://radioparadise.com/ for DJ music https://tidal.com/ for streaming https://everynoise.com/ to discover music genres Draw: http://weavesilk.com/ to draw silk online Exercise:: https://musclewiki.com Art: https://www.nivrozenberg.com/fineart#/summit/ https://www.patrikfuchs.com/10065593/isolatoren","title":"Entertainment"},{"location":"non-work/links/","text":"Links books: http://b-ok.org/ law: https://tldrlegal.com/ for licenses https://tosdr.org/ for terms of services math: https://www.geogebra.org/graphing game theory: https://ncase.me/trust/ reason: https://yourlogicalfallacyis.com/ political: https://www.politicalcompass.org/test https://www.vimentis.ch/ privacy: https://www.privacytools.io/ psychiatry: https://www.informationisbeautiful.net/visualizations/being-defensive/ social phenomena: https://de.wikipedia.org/wiki/Social_Facilitation https://de.wikipedia.org/wiki/Milgram-Experiment visualizations: https://app.rawgraphs.io/ for excel https://www.statista.com/ for stats over the world https://zenobase.com/ to correlate different sources http://distancetomars.com/ https://informationisbeautiful.net travel: https://rail.cc/ historical: https://de.wikipedia.org/wiki/Olympische_Sommerspiele_1904/Leichtathletik_%E2%80%93_Marathon_(M%C3%A4nner) video chat: https://appear.in/ https://meet.jit.si/ collaborate: https://hackmd.io https://de.overleaf.com/ fun: https://www.spielbude.ch (consider anno domini, ein solches ding)","title":"Links"},{"location":"non-work/links/#links","text":"books: http://b-ok.org/ law: https://tldrlegal.com/ for licenses https://tosdr.org/ for terms of services math: https://www.geogebra.org/graphing game theory: https://ncase.me/trust/ reason: https://yourlogicalfallacyis.com/ political: https://www.politicalcompass.org/test https://www.vimentis.ch/ privacy: https://www.privacytools.io/ psychiatry: https://www.informationisbeautiful.net/visualizations/being-defensive/ social phenomena: https://de.wikipedia.org/wiki/Social_Facilitation https://de.wikipedia.org/wiki/Milgram-Experiment visualizations: https://app.rawgraphs.io/ for excel https://www.statista.com/ for stats over the world https://zenobase.com/ to correlate different sources http://distancetomars.com/ https://informationisbeautiful.net travel: https://rail.cc/ historical: https://de.wikipedia.org/wiki/Olympische_Sommerspiele_1904/Leichtathletik_%E2%80%93_Marathon_(M%C3%A4nner) video chat: https://appear.in/ https://meet.jit.si/ collaborate: https://hackmd.io https://de.overleaf.com/ fun: https://www.spielbude.ch (consider anno domini, ein solches ding)","title":"Links"},{"location":"non-work/music/","text":"Music Guitalele chord chart Theory cheat sheet lyrics Jesus gjor meg stille Jesus gjor meg stille, stille (\"jesus i\u00f6r mai stille, stille\") La meg hvilde i din trost (\"la mei ville i din tr\u00f6st\") N\u00e5r meg sa tan vil forvilde (\"na mai satan vil forville\") La meg h\u00f8re blott din rost (\"la mei hoore bloot din r\u00f6st\") Tal du till mitt trette hjerte (\"tal du til mi tr\u00e4te hij\u00e4rte\") Skjenk det herre salig ro (\"schenk de h\u00e4rre salin ruh\") Og fordriv alnod og smerte (\"o fordirv aln\u00f6d o sm\u00e4rte\") Styk min hap og ok min tro (\"st\u00fck min hoop o ok min tru\") Vokt du meg for hver en fare nar jeg tankelos gar frem fra den onde skjulte snare frels meg du, min gud og venn jesus dann min egen vilje sa den helt gar opp i din at ei noget oss ma skille men du helt og fullt blir min https://www.ensemblevocaladventi.fr/IMG/pdf/307_Jesus_gjor_meg_stille.pdf","title":"Music"},{"location":"non-work/music/#music","text":"","title":"Music"},{"location":"non-work/music/#guitalele-chord-chart","text":"","title":"Guitalele chord chart"},{"location":"non-work/music/#theory-cheat-sheet","text":"","title":"Theory cheat sheet"},{"location":"non-work/music/#lyrics","text":"","title":"lyrics"},{"location":"non-work/music/#jesus-gjor-meg-stille","text":"Jesus gjor meg stille, stille (\"jesus i\u00f6r mai stille, stille\") La meg hvilde i din trost (\"la mei ville i din tr\u00f6st\") N\u00e5r meg sa tan vil forvilde (\"na mai satan vil forville\") La meg h\u00f8re blott din rost (\"la mei hoore bloot din r\u00f6st\") Tal du till mitt trette hjerte (\"tal du til mi tr\u00e4te hij\u00e4rte\") Skjenk det herre salig ro (\"schenk de h\u00e4rre salin ruh\") Og fordriv alnod og smerte (\"o fordirv aln\u00f6d o sm\u00e4rte\") Styk min hap og ok min tro (\"st\u00fck min hoop o ok min tru\") Vokt du meg for hver en fare nar jeg tankelos gar frem fra den onde skjulte snare frels meg du, min gud og venn jesus dann min egen vilje sa den helt gar opp i din at ei noget oss ma skille men du helt og fullt blir min https://www.ensemblevocaladventi.fr/IMG/pdf/307_Jesus_gjor_meg_stille.pdf","title":"Jesus gjor meg stille"},{"location":"non-work/personal_development/","text":"Personal development Covey be proactive; work towards gaining influence even to the parts you can not yet influence begin with the end in mind; plan what you want to archive, and constantly assess if you are on the right track order by importance & impact; work on long-term investments instead of short-term achievements of little value think win-win; work towards long-term stable solutions first understand, then try to be understood; listen empathetically, understand the other opinions and the environment they were developed in, then explain work sustainable; exercise, take breaks and be a part of society not giving a f focus on values, not targets. choose explicitly what to care for, and ignore noise. problems will always exist, but can be chosen depending on relationships / career path. love the problems & the process, not (only) the final result. take responsibility for own problems (no matter how they are caused). uncertainty is normal and allows to improve. avoid protecting some identity as it prevents change. \"do something\": always do something, even if small. relationships need trust. personal feedback works well: transfer of expert knowledge formation of team (the \"we\" focus) efficiency of meetings pragmatic decision taking improvements: the why of deadlines -> replace by prioritization & speed? reminders uncomfortable -> different formulation of reminders, better deadline communication, automate remainders by impersonal tool? unresolved dependencies -> easier e2e testing setup decisions undocumented -> define & use appropriate place personality: Conflict Dynamic Profile Aggression Questionnaire (Buss & Perry)","title":"Personal development"},{"location":"non-work/personal_development/#personal-development","text":"","title":"Personal development"},{"location":"non-work/personal_development/#covey","text":"be proactive; work towards gaining influence even to the parts you can not yet influence begin with the end in mind; plan what you want to archive, and constantly assess if you are on the right track order by importance & impact; work on long-term investments instead of short-term achievements of little value think win-win; work towards long-term stable solutions first understand, then try to be understood; listen empathetically, understand the other opinions and the environment they were developed in, then explain work sustainable; exercise, take breaks and be a part of society","title":"Covey"},{"location":"non-work/personal_development/#not-giving-a-f","text":"focus on values, not targets. choose explicitly what to care for, and ignore noise. problems will always exist, but can be chosen depending on relationships / career path. love the problems & the process, not (only) the final result. take responsibility for own problems (no matter how they are caused). uncertainty is normal and allows to improve. avoid protecting some identity as it prevents change. \"do something\": always do something, even if small. relationships need trust.","title":"not giving a f"},{"location":"non-work/personal_development/#personal-feedback","text":"works well: transfer of expert knowledge formation of team (the \"we\" focus) efficiency of meetings pragmatic decision taking improvements: the why of deadlines -> replace by prioritization & speed? reminders uncomfortable -> different formulation of reminders, better deadline communication, automate remainders by impersonal tool? unresolved dependencies -> easier e2e testing setup decisions undocumented -> define & use appropriate place personality: Conflict Dynamic Profile Aggression Questionnaire (Buss & Perry)","title":"personal feedback"},{"location":"work/manage/","text":"Project management project management aspects: complexity exponential APIs complex getting it done bugs after launch maintenance is 10-20% complexity / estimation technology independent plan: vision (what to do; priorities) elements (what needed to solve) cost/complexity, benefit/reward, risk calculate priority order milestones risk analysis risk mitigation during project: continuously overview risks manage cost manage expectations environment: ownership product -> outside vision, expertise, schedule -> team progress, relationships -> stakeholders big vs small releases: incremental updates & releases help to adapt rapidly (saving time with shortcuts, skipping unneeded functionality, improving through early feedback) big bang is more efficient with no unknown unknowns (the longer the project, the smaller the chance) bigger projects: - https://tomrussell.co.uk/writing/2021/07/19/estimating-large-scale-software-projects.html collaboration tools time tracking: https://toggl.com/ focuses on simple time tracking https://timelyapp.com/ focuses on time control task tracking: http://trello.com/ focuses on task communication https://basecamp.com like trello with slack https://redbooth.com/ focuses on project management resources: https://www.scaledagileframework.com/ for enterprise scaled agile methods https://www.product-frameworks.com/ for a collection of PM tools https://www.btw.so/open-source-alternatives for open source alternatives for popular programs","title":"Project management"},{"location":"work/manage/#project-management","text":"","title":"Project management"},{"location":"work/manage/#project-management_1","text":"aspects: complexity exponential APIs complex getting it done bugs after launch maintenance is 10-20% complexity / estimation technology independent plan: vision (what to do; priorities) elements (what needed to solve) cost/complexity, benefit/reward, risk calculate priority order milestones risk analysis risk mitigation during project: continuously overview risks manage cost manage expectations environment: ownership product -> outside vision, expertise, schedule -> team progress, relationships -> stakeholders big vs small releases: incremental updates & releases help to adapt rapidly (saving time with shortcuts, skipping unneeded functionality, improving through early feedback) big bang is more efficient with no unknown unknowns (the longer the project, the smaller the chance) bigger projects: - https://tomrussell.co.uk/writing/2021/07/19/estimating-large-scale-software-projects.html","title":"project management"},{"location":"work/manage/#collaboration-tools","text":"time tracking: https://toggl.com/ focuses on simple time tracking https://timelyapp.com/ focuses on time control task tracking: http://trello.com/ focuses on task communication https://basecamp.com like trello with slack https://redbooth.com/ focuses on project management resources: https://www.scaledagileframework.com/ for enterprise scaled agile methods https://www.product-frameworks.com/ for a collection of PM tools https://www.btw.so/open-source-alternatives for open source alternatives for popular programs","title":"collaboration tools"},{"location":"work/money/","text":"Money account & more accounting: https://cashctrl.com for swiss accounting https://www.bexio.com/ for accounting businesses: https://www.zefix.admin.ch for handelsregister https://www.shab.ch/ startup: https://www.ifj.ch/en for courses https://www.startup-campus.ch/ for courses / coaching http://www.cti-entrepreneurship.ch/ for resources https://www.f6s.com/ for founding http://www.ifj.ch/en for business plans","title":"Money"},{"location":"work/money/#money","text":"account & more accounting: https://cashctrl.com for swiss accounting https://www.bexio.com/ for accounting businesses: https://www.zefix.admin.ch for handelsregister https://www.shab.ch/ startup: https://www.ifj.ch/en for courses https://www.startup-campus.ch/ for courses / coaching http://www.cti-entrepreneurship.ch/ for resources https://www.f6s.com/ for founding http://www.ifj.ch/en for business plans","title":"Money"},{"location":"work/research/","text":"Research summaries: - https://www.blinkist.com/ networks: - https://www.academia.edu/ reference managers: - https://mediatum.ub.tum.de/1127579?show_id=1320978 (comparison) - https://www.jabref.org/ - https://www.zotero.org/ find papers: - https://www.webofscience.com/ - https://scholar.google.com/ - https://arxiv.org/ (to download/find similar papers) - https://app.litmaps.co/ (network graph) - https://www.semanticscholar.org/ read papers: - https://sci-hub.se/ - https://eprint.iacr.org/ (crypto) law: - legalis.ch (kommentare, rechtssuche) - swisslex.ch (legalis + mehr zeitschriften) - weblaw.ch (legale suchmachine) specific topics pop-science: - https://apenwarr.ca/log/20211117 (blockchain)","title":"Research"},{"location":"work/research/#research","text":"summaries: - https://www.blinkist.com/ networks: - https://www.academia.edu/ reference managers: - https://mediatum.ub.tum.de/1127579?show_id=1320978 (comparison) - https://www.jabref.org/ - https://www.zotero.org/ find papers: - https://www.webofscience.com/ - https://scholar.google.com/ - https://arxiv.org/ (to download/find similar papers) - https://app.litmaps.co/ (network graph) - https://www.semanticscholar.org/ read papers: - https://sci-hub.se/ - https://eprint.iacr.org/ (crypto) law: - legalis.ch (kommentare, rechtssuche) - swisslex.ch (legalis + mehr zeitschriften) - weblaw.ch (legale suchmachine) specific topics pop-science: - https://apenwarr.ca/log/20211117 (blockchain)","title":"Research"},{"location":"work/teach/","text":"Teach https://www.prolehre.tum.de/fileadmin/w00btq/www/Angebote_Broschueren_Handreichungen/prolehre_erfolgsfaktoren.pdf feedback: before with background, target of participants during with speed after with actionable feedback short workshop style: start with motivation, target of course introduce terminology & theory, then quiz apply theory & then allow to solve exercises end with topics to choose from tools introduce group to each other: explain work (how do you explain it to your mother) share past experience (what are you most proud of) share expectations to the course (what do you hope to learn) group work: discuss open answers, then present to all explain last technical topics to each other blackboard: PostIt with technical term, in turn pick one & explain byebye: let people note down what to do different next week","title":"Teach"},{"location":"work/teach/#teach","text":"https://www.prolehre.tum.de/fileadmin/w00btq/www/Angebote_Broschueren_Handreichungen/prolehre_erfolgsfaktoren.pdf feedback: before with background, target of participants during with speed after with actionable feedback short workshop style: start with motivation, target of course introduce terminology & theory, then quiz apply theory & then allow to solve exercises end with topics to choose from","title":"Teach"},{"location":"work/teach/#tools","text":"introduce group to each other: explain work (how do you explain it to your mother) share past experience (what are you most proud of) share expectations to the course (what do you hope to learn) group work: discuss open answers, then present to all explain last technical topics to each other blackboard: PostIt with technical term, in turn pick one & explain byebye: let people note down what to do different next week","title":"tools"}]}